<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Tobias Grieger</title>
 <link href="http://tbg.github.io//atom.xml" rel="self"/>
 <link href="http://tbg.github.io//"/>
 <updated>2018-12-29T20:00:59+00:00</updated>
 <id>http://tbg.github.io/</id>
 <author>
   <name>Tobias Grieger</name>
   <email></email>
 </author>

 
 <entry>
   <title>Using Gmail like Inbox (Zero)</title>
   <link href="http://tbg.github.io//gmail-filter-inbox-zero"/>
   <updated>2018-12-29T00:00:00+00:00</updated>
   <id>http://tbg.github.io//gmail-filter-inbox-zero</id>
   <content type="html">&lt;p&gt;With Google Inbox &lt;a href=&quot;https://gsuiteupdates.googleblog.com/2018/09/inbox-by-gmail-shutdown.html&quot;&gt;shutting down&lt;/a&gt; in March 2019, I made the move over to Gmail
for my work email a few months ago. My volume of non-Github emails is low, so
taming the Github firehose was the crucial point here.  In Inbox, I had a setup
(an admittedly wonky one) that would filter GitHub mails that were likely
relevant to me into categories from which I would “mute out” the threads I
didn’t think were relevant to me. That way, I’d look at any issue/PR that I
wasn’t going to be involved in once, without having to re-discard the thread
when new messages would arrive over and over again.&lt;/p&gt;

&lt;p&gt;This allowed me to be pretty close to &lt;a href=&quot;https://en.wiktionary.org/wiki/inbox_zero&quot;&gt;Inbox Zero&lt;/a&gt; in all categories.&lt;/p&gt;

&lt;p&gt;Note that Inbox/Gmail is smart about un-muting if the “disposition” changes
(i.e. if you receive a Github notification because you receive all
notifications, then mute, and then get assigned to the issue, the last message
will unmute the thread because the recipient changed).&lt;/p&gt;

&lt;p&gt;The way I wanted things organized in Gmail is as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the inbox receives stuff from the Github firehose that I’ll likely want to
look at&lt;/li&gt;
  &lt;li&gt;a Firehose label (skipping the inbox) receives the remainder of the Github
firehose&lt;/li&gt;
  &lt;li&gt;a Talk label (skipping the inbox) receives all non-Github mail.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s straightforward (in my case) to define the filter rules so that emails go
into the appropriate labels. Unfortunately, muting doesn’t work the same way
(except for the inbox): Muted threads will still be sorted into the labels and
there’s no way around that (since muting is a per-thread property, but all the
filter gets to look at is the newly arrived message).&lt;/p&gt;

&lt;p&gt;So I use an AppScript cronjob that removes messages belonging to muted threads
from my custom labels, which is good enough for me. Occasionally there’ll be a
muted thread there, but if I ignore it, it’ll go away and, more importantly,
the vast majority of them never even surface on my screen again.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://blog.filippo.io/gmail-bot-with-apps-script-and-typescript/&quot;&gt;here&lt;/a&gt; on how to get this script into the right place, but here it is:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HideMutedThreads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userLabels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GmailApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getUserLabels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;search&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;is:mute {in:inbox &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userLabels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;label:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;threads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GmailApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getFirstMessageSubject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;userLabels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;moveToArchive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here are my filters:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Matches: -from:{notifications@github.com}
Do this: Skip Inbox, Apply label “Talk”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Matches: from:notifications@github.com -{cc:{author@noreply.github.com review_requested@noreply.github.com comment@noreply.github.com mention@noreply.github.com assign@noreply.github.com} subject:{storage performance perf server engine mvcc bug release roachtest stress teamcity backport}
Do this: Skip Inbox, Apply label “Firehose”, Never send it to Spam, Never mark it as important&lt;/p&gt;
&lt;/blockquote&gt;

</content>
 </entry>
 
 <entry>
   <title>Paxos on Steroids and a Crash Course in TLA+</title>
   <link href="http://tbg.github.io//single-decree-paxos-tla-compare-and-swap"/>
   <updated>2017-04-07T00:00:00+00:00</updated>
   <id>http://tbg.github.io//paxos-cas-tla</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://twitter.com/rystsov&quot;&gt;@rystsov&lt;/a&gt; recently posted an interesting
&lt;a href=&quot;http://rystsov.info/2017/02/15/simple-consensus.html&quot;&gt;article&lt;/a&gt; in which he describes a peculiar generalization of
&lt;a href=&quot;https://www.idi.ntnu.no/emner/tdt02/PaxosMadeSimple.pdf&quot;&gt;Single-Decree Paxos&lt;/a&gt; that could, in some situations, replace
&lt;a href=&quot;https://en.wikipedia.org/wiki/Paxos_(computer_science)#Multi-Paxos&quot;&gt;Multi-Paxos&lt;/a&gt;. I was skeptical: this looked really useful; why wasn’t
everyone aware of it already?&lt;/p&gt;

&lt;p&gt;I still don’t know the answer to that question, but I’ve since failed at
constructing a counter-example, and find that the algorithm &lt;em&gt;looks&lt;/em&gt; “correct”
(more on what that means later).&lt;/p&gt;

&lt;p&gt;That’s exciting! Today, embark with me on what will hopefully become a series
of posts on what (at least here) will be called &lt;em&gt;Compare-And-Swap Paxos&lt;/em&gt;
(CAS-Paxos), and how to explore its properties through formal specification.&lt;/p&gt;

&lt;p&gt;A reasonable first step is a tutorial-style formal description of the algorithm
in &lt;a href=&quot;http://lamport.azurewebsites.net/tla/tla.html&quot;&gt;TLA+&lt;/a&gt;, which among other things is also a model checker which allows
you to specify the algorithm and explore concrete histories it permits.&lt;/p&gt;

&lt;p&gt;This then, is the plan for today:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#review-linearizability&quot;&gt;Quick Review of Linearizability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#review-single-decree-paxos&quot;&gt;Quick review of Single-Decree Paxos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#verbal-description-of-cas-paxos&quot;&gt;(Colloquial) Description of CAS-Paxos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#specifying-cas-paxos-in-tla&quot;&gt;Tutorial: Specifying CAS-Paxos in TLA+&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#discovering-interesting-histories&quot;&gt;Tutorial: Discovering Interesting Histories&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#discussion-of-cas-paxos&quot;&gt;Discussion: CAS-Paxos and its surprises&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;review-linearizability&quot;&gt;Review: Linearizability&lt;/h2&gt;

&lt;p&gt;We are talking about registers today (i.e. an abstract system that, no matter the
implementation, exposes and operates on a single value), so for the purpose of
making everything hands-on, imagine your system to be a distributed key-value
store with only a single active key (perhaps &lt;a href=&quot;https://cockroachlabs.com&quot;&gt;CockroachDB&lt;/a&gt; or one using the
algorithm described later), and that you have multiple clients running
compare-and-swaps on that key.&lt;/p&gt;

&lt;p&gt;Linearizability of that system (i.e. all the clients writing to that key) holds
if no matter how things interleave, for each operation in any possible history, you can find an instant at which it (and only it)
applied atomically, and that instant is between the moment in time at which
the respective command was initiated (i.e. a request dispatched by a client)
and acknowledged (i.e. a response received by the client).&lt;/p&gt;

&lt;p&gt;For example, if the register is initially &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;, and at&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;time=10&lt;/code&gt;: I dispatch &lt;code class=&quot;highlighter-rouge&quot;&gt;CAS(bar, baz)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;time=15&lt;/code&gt;: You dispatch &lt;code class=&quot;highlighter-rouge&quot;&gt;CAS(foo, bar)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;time=20&lt;/code&gt;: I receive &lt;code class=&quot;highlighter-rouge&quot;&gt;OK&lt;/code&gt; from the system&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;time=30&lt;/code&gt;: You receive &lt;code class=&quot;highlighter-rouge&quot;&gt;OK&lt;/code&gt; from the system&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;then that history is linearizable: my CAS succeeded, so your operation must
have applied to the system before mine; otherwise the register wouldn’t have
had the value &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt; I’d assumed I’d seen. And that is well possible because you
initiated your CAS before the system told me mine had applied, and so we can
arrange them atomically in a history for the system:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;time=10&lt;/code&gt;: I dispatch &lt;code class=&quot;highlighter-rouge&quot;&gt;CAS(bar, baz)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;time=15&lt;/code&gt;: You dispatch &lt;code class=&quot;highlighter-rouge&quot;&gt;CAS(foo, bar)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;time=16&lt;/code&gt;: Server executes your &lt;code class=&quot;highlighter-rouge&quot;&gt;CAS(foo, bar)&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;time=17&lt;/code&gt;: Server executes my &lt;code class=&quot;highlighter-rouge&quot;&gt;CAS(bar, baz)&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;time=20&lt;/code&gt;: I receive &lt;code class=&quot;highlighter-rouge&quot;&gt;OK&lt;/code&gt; from the system&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;time=30&lt;/code&gt;: You receive &lt;code class=&quot;highlighter-rouge&quot;&gt;OK&lt;/code&gt; from the system&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://aphyr.com/posts/313-strong-consistency-models&quot;&gt;Kyle Kingsbury (aphyr) does a much better job&lt;/a&gt; describing this, so you should go
there unless you’re already comfortable with the concept.&lt;/p&gt;

&lt;h2 id=&quot;review-single-decree-paxos&quot;&gt;Review: Single-Decree Paxos&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.idi.ntnu.no/emner/tdt02/PaxosMadeSimple.pdf&quot;&gt;Single-Decree Paxos&lt;/a&gt; is a consensus algorithm that lets
a number of so-called acceptors agree on a single value (out of many that may
be offered to them) and preserve that value for eternity, unless a quorum of
acceptors holding on to a copy of the value perish, never to be seen again.&lt;/p&gt;

&lt;p&gt;To clients, the abstraction provided is a linearizable register that can be written exactly
once and, once written, exposes the same value forever.&lt;/p&gt;

&lt;p&gt;There are good resources for learning about Paxos &lt;a href=&quot;https://www.idi.ntnu.no/emner/tdt02/PaxosMadeSimple.pdf&quot;&gt;here&lt;/a&gt; (slides
with examples!) and &lt;a href=&quot;https://www.microsoft.com/en-us/research/publication/paxos-made-simple/&quot;&gt;here&lt;/a&gt; (words only), so we only review
it briefly. You absolutely want to make sure that you understand simple Paxos
well before you continue.&lt;/p&gt;

&lt;p&gt;Paxos is organized around ballot (or proposal) numbers, and the goal is
generally to get successful responses from a majority of the acceptors. Clients
(“proposers”) which want to propose a (or learn the, if any) value pick
a unique proposal number (in practice, one that they think might actually
succeed) and try to take it first through a &lt;code class=&quot;highlighter-rouge&quot;&gt;PREPARE&lt;/code&gt; phase and, if a majority
of acceptors indicates success, an &lt;code class=&quot;highlighter-rouge&quot;&gt;ACCEPT&lt;/code&gt; phase.&lt;/p&gt;

&lt;p&gt;At the end of a successful &lt;code class=&quot;highlighter-rouge&quot;&gt;PREPARE&lt;/code&gt; phase, the proposer has learned from
a majority of the acceptors&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;that they promise to not service any smaller ballots than the proposer’s, and&lt;/li&gt;
  &lt;li&gt;whether there is already a value (not necessarily committed) which must be picked
up or whether the proposer gets to choose one.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If any values are returned from &lt;code class=&quot;highlighter-rouge&quot;&gt;PREPARE&lt;/code&gt;, the proposer must use the value
corresponding to the highest ballot (and there are never two values for any
ballot).&lt;/p&gt;

&lt;p&gt;The proposer can then proceed to the &lt;code class=&quot;highlighter-rouge&quot;&gt;ACCEPT&lt;/code&gt; phase, in which it tries to store
the chosen value on all acceptors (but needs only a quorum); an acceptor will
refuse values for a ballot that it has promised not to service any more.&lt;/p&gt;

&lt;p&gt;Unsuccessful proposals are usually caused by network issues, the proposer
crashing half-way through, or (most interestingly) multiple proposals
overlapping concurrently. But, no matter the interleaving, after the first
successful &lt;code class=&quot;highlighter-rouge&quot;&gt;ACCEPT&lt;/code&gt; phase, the value is set in stone (barring failure of
a majority of acceptors) and all successful proposals will result in the
same value - a register backed by Single Decree Paxos is linearizable.&lt;/p&gt;

&lt;h2 id=&quot;verbal-description-of-cas-paxos&quot;&gt;Verbal Description of CAS-Paxos&lt;/h2&gt;

&lt;p&gt;CAS-Paxos is derived from Single Decree Paxos with just one small but impactful
change: After the &lt;code class=&quot;highlighter-rouge&quot;&gt;PREPARE&lt;/code&gt; phase, the proposer is allowed to pick a new value
(perhaps taking into account the value, if any, learned from the &lt;code class=&quot;highlighter-rouge&quot;&gt;PREPARE&lt;/code&gt;
phase).&lt;/p&gt;

&lt;p&gt;For the purposes of this discussion, we’ll settle on that all proposers want to
run compare-and-swaps: if the value they learn is the one they expect, they go
ahead and try to get a new value accepted. To simply read the value, you run an
instance of Single-Decree Paxos instead.&lt;/p&gt;

&lt;p&gt;It’s not clear at this point of the posting, but the resulting algorithm
actually seems to make basic sense (as in, it provides guarantees which are
useful), though we’ll discover a few caveats. And, though we won’t even get
close to proving it today (and I haven’t proved it), the semantics of the
register, once suitably defined, should be linearizable!&lt;/p&gt;

&lt;p&gt;For now, the bird-eye view: whereas before we were stuck with a write-once
register, now we seem to have something on our hands that can change value as
often as we’d like, and perhaps could serve as the building block of
a key-value store.&lt;/p&gt;

&lt;p&gt;Let’s discuss the concrete behavior of the algorithm later and do some TLA+
first.&lt;/p&gt;

&lt;h2 id=&quot;specifying-cas-paxos-in-tla&quot;&gt;Specifying CAS-Paxos in TLA+&lt;/h2&gt;

&lt;p&gt;Don’t care about writing the spec? &lt;a href=&quot;#running-the-model&quot;&gt;Jump straight into the
analysis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Don’t try to copy-paste from these examples; they’ve been formatted to fit the
screen. Instead, to follow along, head on over to the &lt;a href=&quot;https://github.com/tschottdorf/caspaxos-tla&quot;&gt;caspaxos-tla
repo&lt;/a&gt;; the initial commits on the master branch track this post.&lt;/p&gt;

&lt;p&gt;A TLA specification starts with a list of module imports. We’ll deal with
integers and will want to talk about the cardinality of sets, so we import&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;EXTENDS Integers, FiniteSets
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From what I can tell, in practice you use whichever operators you find on the
internet and when it fails, realize that there is something you needed to
import, which you then add.&lt;/p&gt;

&lt;h3 id=&quot;constants-basic-definitions-and-assertions&quot;&gt;Constants, Basic Definitions, and Assertions&lt;/h3&gt;

&lt;p&gt;When you specify a model, you leave certain parts configurable so that you can
invoke the model checker with various settings.&lt;/p&gt;

&lt;p&gt;For CAS-Paxos, we have a set of possible values the register can take, a set of
oblique acceptors for which we really only care about how many they are, and
a mutator which maps a ballot number and a value to a new value.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CONSTANT Values, Acceptors, Mutator(_, _)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Throughout this whole exercise, keep in mind that the state space which needs
to be explored by the model checker exponentially spirals out of control. For
example, you certainly can’t hope to check all possible histories when the
register can hold 100 different values (in fact, 10 is probably out of reach
already); I’m using 4 throughout this example simply because that finishes in 15
seconds on my machine. Note also that we don’t restrict the ballot numbers
just yet; that’s achieved later, by overriding the definition of the natural
numbers while checking the model.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Mutator&lt;/code&gt; is a good approximation of how compare-and-swap’ping proposers would
choose the new values (Single-Decree Paxos corresponds to &lt;code class=&quot;highlighter-rouge&quot;&gt;Mutator(ballot,
foundValue) = foundValue&lt;/code&gt;), abstracting away nondeterminism by using the ballot
number to decide on the new value. You could let the model checker generate
“real” CAS operations as well, but let’s agree that this is interesting enough,
and that it’s easy enough to extend this later.&lt;/p&gt;

&lt;p&gt;Now, we define the set of all quorums. The crucial property that we need is
that any two quorums intersect nontrivially, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;ASSUME&lt;/code&gt; command lets the
model checker verify that it holds in the concrete instances we run it for.&lt;/p&gt;

&lt;p&gt;Since we’re lazy, we use the set of all majorities of acceptors as the set of
quorums. This is what you usually see in practice because it maximizes the
number of acceptors you can afford to lose.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Quorums == {
  S \in SUBSET(Acceptors) :
    Cardinality(S) &amp;gt; Cardinality(Acceptors \ S) }

ASSUME QuorumAssumption == /\ \A Q \in Quorums : Q \subseteq Acceptors
                           /\ \A Q1, Q2 \in Quorums : Q1 \cap Q2 # {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What this does is express that&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Quorums&lt;/code&gt; is the set of those sets of acceptors for which more acceptors are in
the set than not. That’s just a fancy way of collecting all subsets 
containing more than half of everyone.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;QuorumAssumption&lt;/code&gt; has to be true or the model checker aborts. It is
satisfied if:
    &lt;ul&gt;
      &lt;li&gt;all the quorums we declared actually consist of acceptors (something that
you probably implicitly assumed anyway), and&lt;/li&gt;
      &lt;li&gt;any two sets of quorums have nonempty intersection.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On to ballot numbers, for which we define&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Ballot == Nat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This just means that we define a set &lt;code class=&quot;highlighter-rouge&quot;&gt;Ballots&lt;/code&gt; which equals the natural numbers
0, 1, …. As mentioned earlier, when we run the model, we’re going to override
&lt;code class=&quot;highlighter-rouge&quot;&gt;Nat&lt;/code&gt; by some finite subset, typically restricting it to &lt;code class=&quot;highlighter-rouge&quot;&gt;1, 2, 3&lt;/code&gt; - that’s
tiny, but enough to find an interesting history without waiting.&lt;/p&gt;

&lt;h3 id=&quot;messages&quot;&gt;Messages&lt;/h3&gt;

&lt;p&gt;Now we define the set of all possible messages. In this specification,
proposers are implicit. Messages originating from them are created “out of thin
air” and not addressed to a specific acceptor. In practice they would be,
though note that each acceptor would receive the same “message body”, and
omitting the explicit originator and recipient reduces the state space. Note
also that messages are not explicitly rejected but simply not reacted to. In
particular, the implicit proposer has no notion of which ballot to try next.
The spec lets them try arbitrary ballots instead. Bad for the state space, but
good for generality.&lt;/p&gt;

&lt;p&gt;A message is either a prepare request for a ballot, a prepare response, an
accept request for a ballot with a new value, or an accept response.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Message ==      [type : {&quot;prepare-req&quot;}, bal : Ballot]
           \cup [
                 type : {&quot;prepare-rsp&quot;}, acc : Acceptors,
                 \* ballot for which promise is given
                 promised : Ballot,
                 \* ballot at which val was accepted
                 accepted : Ballot,
                 val : Values
                ]
           \cup [type : {&quot;accept-req&quot;}, bal : Ballot, newVal : Values]
           \cup [type : {&quot;accept-rsp&quot;}, acc : Acceptors,
                 accepted : Ballot ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Above, &lt;code class=&quot;highlighter-rouge&quot;&gt;\cup&lt;/code&gt; is the union of two sets, {&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;prepare-req&quot;&lt;/code&gt;} is a set containing
as its only element the string &lt;code class=&quot;highlighter-rouge&quot;&gt;prepare-req&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;[ x : X, y : Y ]&lt;/code&gt; is the set
of all records (TLAs version of associative arrays) with only keys &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;
set and their values elements of &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Y&lt;/code&gt;, respectively.&lt;/p&gt;

&lt;h3 id=&quot;state-of-the-model&quot;&gt;State of the Model&lt;/h3&gt;

&lt;p&gt;Since we are modelling only the acceptors and messages, the state of the mode
is only the set of messages in existence, and whatever local state each
acceptor stores:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;VARIABLE prepared,
         accepted,
         value
VARIABLE msgs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The tuple &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;prepared[a], accepted[a], value[a]&amp;gt;&amp;gt;&lt;/code&gt; will be the state that would
be kept on acceptor &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; in a real-world implementation of the spec.&lt;/p&gt;

&lt;p&gt;The above says awefully little about what these variables are actually like in
practice, so we add a formula which we later instruct the model checker to
verify in each state, namely that &lt;code class=&quot;highlighter-rouge&quot;&gt;prepared&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;accepted&lt;/code&gt; map acceptors to
ballot numbers, &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; maps acceptors to values, and that any message sent is
an element of the above set of “legal” messages.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TypeOK == /\ prepared \in [ Acceptors -&amp;gt; Ballot ]
          /\ accepted \in [ Acceptors -&amp;gt; Ballot ]
          /\ value \in    [ Acceptors -&amp;gt; Values ]
          /\ msgs \subseteq Message
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;How does one “send” a message, then? Like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Send(m) == msgs' = msgs \cup {m}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;TLA models the “next state” with primed variables, so to satisfy the formula
&lt;code class=&quot;highlighter-rouge&quot;&gt;Send(m)&lt;/code&gt;, the next state’s incarnation of &lt;code class=&quot;highlighter-rouge&quot;&gt;msgs&lt;/code&gt; must contain &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We won’t ever remove messages from &lt;code class=&quot;highlighter-rouge&quot;&gt;msgs&lt;/code&gt;. By modelling &lt;code class=&quot;highlighter-rouge&quot;&gt;msgs&lt;/code&gt; as a set that
never shrinks, we model that messages may be received multiple times, and that
they can freely reorder. Desirable properties to model because even though
TCP/IP connections don’t allow reordering, sometimes we need to reconnect and
no such property holds across connections!&lt;/p&gt;

&lt;p&gt;Now, finally, things get interesting and we get to specify the initial state of
the model:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Init == /\ prepared = [ a \in Acceptors |-&amp;gt; 0 ]
        /\ accepted = [ a \in Acceptors |-&amp;gt; 0 ]
        /\ value    = [ a \in Acceptors |-&amp;gt; InitialValue ]
        /\ msgs = {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ok, maybe not too interesting. Note however that the initial state has an
initial committed value, ie the register doesn’t start “empty”.  This is an
inconsequential simplification.&lt;/p&gt;

&lt;h3 id=&quot;stub-actions&quot;&gt;Stub Actions&lt;/h3&gt;

&lt;p&gt;Before we write down the actions that drive the algorithm (i.e. sending and
reacting to messages), we want to finish up the scaffolding. We define mock
actions (actions are just formulas which contain primed variables, meaning that
to satisfy them you must mutate the state):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PrepareReq(b) == FALSE
PrepareRsp(a) == FALSE
AcceptReq(b, v) == FALSE
AcceptRsp(a) == FALSE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ll return to those later.&lt;/p&gt;

&lt;h3 id=&quot;the-main-formula&quot;&gt;The Main Formula&lt;/h3&gt;

&lt;p&gt;Now, finally, we reach the centerpiece of the whole operation: The &lt;code class=&quot;highlighter-rouge&quot;&gt;Next&lt;/code&gt;
formula, traditionally named such because it is this formula that we’ll
instruct the model checker to satisfy by deriving new reachable states.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Next == \/ \E b \in Ballot : \/ PrepareReq(b)
                             \/ \E v \in Values : AcceptReq(b, v)
        \/ \E a \in Acceptors : PrepareRsp(a) \/ AcceptRsp(a)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Read: Satisfy &lt;code class=&quot;highlighter-rouge&quot;&gt;Next&lt;/code&gt; by either satisfying &lt;code class=&quot;highlighter-rouge&quot;&gt;PrepareReq&lt;/code&gt; for some ballot, or
&lt;code class=&quot;highlighter-rouge&quot;&gt;AcceptReq&lt;/code&gt; for some ballot and value, or by finding an acceptor for which
&lt;code class=&quot;highlighter-rouge&quot;&gt;PrepareRsp&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;AcceptRsp&lt;/code&gt; can be satisfied.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Next&lt;/code&gt; is just a name without formal meaning, but &lt;code class=&quot;highlighter-rouge&quot;&gt;Spec&lt;/code&gt; is the default entry
point for the TLA+ model checker. The below formula is a temporal formula and
means that the valid behaviors of the specification are those which initially
satisfy &lt;code class=&quot;highlighter-rouge&quot;&gt;Init&lt;/code&gt;, and from each step to the following the formula &lt;code class=&quot;highlighter-rouge&quot;&gt;Next&lt;/code&gt; is
satisfied, or all the variables stay the same (“stuttering step”).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Spec == Init /\ [][Next]_&amp;lt;&amp;lt;prepared, accepted, value, msgs&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now hopefully it is at least somewhat clear how the model checker works: it
constructs all states that satisfy &lt;code class=&quot;highlighter-rouge&quot;&gt;Init&lt;/code&gt; (there could be many, though here
there’s just one), and until it runs out of new states explores all state
transitions that satisfy &lt;code class=&quot;highlighter-rouge&quot;&gt;Next&lt;/code&gt;. Phew! You can imagine how quickly the state
space blows up as you increase the size of the parameters, and hopefully it’s
also clear that any infinite set is likely going to lead to an infinite state
space!&lt;/p&gt;

&lt;h3 id=&quot;running-the-model-checker&quot;&gt;Running the Model Checker&lt;/h3&gt;

&lt;p&gt;As a last deed in this section, we give the model checker something to actually
check (as of now, it would construct all behaviors, but not check anything
about them). Since we’re not ready to check anything meaningful, we just assert
&lt;code class=&quot;highlighter-rouge&quot;&gt;TypeOK&lt;/code&gt;; we’ll add something else later.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DesiredProperties == TypeOK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s no real point, but now you can try out the model. If you clone &lt;a href=&quot;https://github.com/tschottdorf/caspaxos-tla&quot;&gt;the
repo&lt;/a&gt; and check out the &lt;a href=&quot;https://github.com/tschottdorf/caspaxos-tla/commit/5bcac1e38a9521cc4a939103611786fd675d6ac7&quot;&gt;right commit&lt;/a&gt;, you’ll
find a prepared model along with the TLA file we’ve assembled so far.&lt;/p&gt;

&lt;p&gt;Open the model using the &lt;a href=&quot;http://lamport.azurewebsites.net/tla/toolbox.html&quot;&gt;TLA toolbox&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;File -&amp;gt; Open Spec -&amp;gt; Add New
Spec&lt;/code&gt;), and note how we declared &lt;code class=&quot;highlighter-rouge&quot;&gt;Acceptors&lt;/code&gt; as a set of three “model values”;
a model value is a value that’s completely opaque to the model checker, and not
equal to any other value. We also have &lt;code class=&quot;highlighter-rouge&quot;&gt;Values = {0, 1, 2, 3}&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Mutator(b,
v)&lt;/code&gt; is set to `(1&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;b*v) % 4` (an arbitrary choice).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Furthermore, there is a “Definition Override” that sets &lt;code class=&quot;highlighter-rouge&quot;&gt;Nat&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;0..3&lt;/code&gt; and we
have added &lt;code class=&quot;highlighter-rouge&quot;&gt;DesiredProperties&lt;/code&gt; under &lt;code class=&quot;highlighter-rouge&quot;&gt;Invariants&lt;/code&gt; so that it will be checked
for every state reachable in this model.&lt;/p&gt;

&lt;p&gt;Now, click “Run”… oops, immediately errors out: “Deadlock reached”. This
happens because we stubbed out the actions and so from the initial state, there
is no way to satisfy the formula. That happening usually amounts to an error,
and the model checker checks for it by default. Time to add the actual
algorithm!&lt;/p&gt;

&lt;h3 id=&quot;completing-the-specification&quot;&gt;Completing the Specification&lt;/h3&gt;

&lt;p&gt;We return to the currently stubbed-out actions &lt;code class=&quot;highlighter-rouge&quot;&gt;PrepareReq&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;PrepareRsp&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;AcceptReq&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;AcceptRsp&lt;/code&gt;, replacing them one by one. The result will be
&lt;a href=&quot;https://github.com/tschottdorf/caspaxos-tla/commit/f5d70bd6540bdc1d5fb5cb553ab1a4d36186fc18&quot;&gt;this commit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First up is &lt;code class=&quot;highlighter-rouge&quot;&gt;PrepareReq&lt;/code&gt;, which is the message sent by a proposer when it
gets started on a new proposal (ballot).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BallotActive(b) == \E m \in msgs :
                        /\ m.type = &quot;prepare-req&quot;
                        /\ m.bal = b
PrepareReq(b) ==
    /\ ~ BallotActive(b)
    /\ Send([
                type |-&amp;gt; &quot;prepare-req&quot;,
                bal  |-&amp;gt; b
           ])
    /\ UNCHANGED(&amp;lt;&amp;lt;prepared, accepted, value&amp;gt;&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A ballot is started by sending a prepare request (with the hope that
responses will be received from a quorum). We could allow multiple
prepare requests for a single ballot, but since they are all identical
and we already model multiple-receipt for all messages, this adds only
state space complexity. So a ballot will only be prepared once in this
model.&lt;/p&gt;

&lt;p&gt;More precisely, a successor (primed) state satisfies &lt;code class=&quot;highlighter-rouge&quot;&gt;PrepareReq(b)&lt;/code&gt; if and only if&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it’s predecessor (i.e. the unprimed variables) contain no prepare request for
ballot &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt; is negation), and&lt;/li&gt;
  &lt;li&gt;the primed state contains a message of type &lt;code class=&quot;highlighter-rouge&quot;&gt;prepare-req&lt;/code&gt; and ballot &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;, and&lt;/li&gt;
  &lt;li&gt;everything else is identical.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last condition may surprise you, but consider that if we omitted it, you
could create lots of nonsensical successor states by freely mutating
&lt;code class=&quot;highlighter-rouge&quot;&gt;prepared&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;accepted&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;. Not what we would want!&lt;/p&gt;

&lt;p&gt;Now that we’re warmed up, let’s get a bit more involved and hash out
&lt;code class=&quot;highlighter-rouge&quot;&gt;PrepareRsp(a)&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PrepareRsp(a) ==
    /\ \E m \in msgs :
        /\ m.type = &quot;prepare-req&quot;
        /\ m.bal &amp;gt; prepared[a]
        /\ prepared' = [prepared EXCEPT ![a] = m.bal]
        /\ Send([
                    acc      |-&amp;gt; a,
                    type     |-&amp;gt; &quot;prepare-rsp&quot;,
                    promised |-&amp;gt; m.bal,
                    accepted |-&amp;gt; accepted[a],
                    val      |-&amp;gt; value[a]
               ])
    /\ UNCHANGED &amp;lt;&amp;lt;accepted, value&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Read: A prepare response can be sent if by an acceptor if a) a response was
demanded via a prepare request (there exists a corresponding prepare request
message) and b) the acceptor has not already prepared that or any larger
ballot.  On success, the acceptor remembers that it has prepared the new
ballot, and sends a response.&lt;/p&gt;

&lt;p&gt;The odd syntax &lt;code class=&quot;highlighter-rouge&quot;&gt;[prepared EXCEPT ![a] = m.bal]&lt;/code&gt; means&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;same as prepared, with the exception that when evaluated at &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;, return
&lt;code class=&quot;highlighter-rouge&quot;&gt;m.bal&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and nobody likes it, including its author &lt;a href=&quot;http://lamport.azurewebsites.net/tla/tla.html&quot;&gt;Leslie Lamport&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Phew! Getting the hang of it yet? I hope so, because now it’s time for the big
leagues:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AcceptReq(b, v) ==
    /\ ~ \E m \in msgs : m.type = &quot;accept-req&quot; /\ m.bal = b
    /\ \E Q \in Quorums :
        LET M == {m \in msgs : /\ m.type = &quot;prepare-rsp&quot;
                               /\ m.promised = b
                               /\ m.acc \in Q}
        IN /\ \A a \in Q : \E m \in M : m.acc = a
           /\ \E m \in M :
                /\ m.val = v
                /\ \A mm \in M : mm.accepted \leq m.accepted
    /\ LET newVal == Mutator(b, v) \* crucial difference from Paxos
       IN Send([
                type   |-&amp;gt; &quot;accept-req&quot;,
                bal    |-&amp;gt; b,
                newVal |-&amp;gt; newVal
               ])
    /\ UNCHANGED(&amp;lt;&amp;lt;accepted, value, prepared&amp;gt;&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Read: An accept request can only be sent (i.e. fabricated from thin air)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;once;&lt;/li&gt;
  &lt;li&gt;if prepare responses for the ballot have been received from a quorum, and&lt;/li&gt;
  &lt;li&gt;with a new value based on the most recently accepted value from the prepare
responses.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It’s only here that we really deviate from Single-Decree Paxos by using
&lt;code class=&quot;highlighter-rouge&quot;&gt;Mutator&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;Scared of &lt;code class=&quot;highlighter-rouge&quot;&gt;AcceptRsp&lt;/code&gt;? Don’t worry, that one is straightforward again.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AcceptRsp(a) ==
    /\ \E m \in msgs :
        /\ m.type = &quot;accept-req&quot;
        /\ m.bal \geq prepared[a]
        /\ prepared' = [prepared EXCEPT ![a] = m.bal]
        /\ accepted' = [accepted EXCEPT ![a] = m.bal]
        /\ value'    = [value    EXCEPT ![a] = m.newVal]
        /\ Send([
                    acc      |-&amp;gt; a,
                    type     |-&amp;gt; &quot;accept-rsp&quot;,
                    accepted |-&amp;gt; m.bal
                ])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Read: An acceptor can reply to an accept request only if it hasn’t yet prepared
a higher ballot. Before replying, it makes sure it marks the ballot as prepared
(as the particular acceptor may not have received the associated prepare
request earlier), and updates its accepted ballot and the new value.&lt;/p&gt;

&lt;p&gt;That’s it already! Try running the model again - it should take some time and
your laptop may begin radiating energy in the form of heat. On mine the state
space exploration takes around 15s and reports a total of 791370 states.&lt;/p&gt;

&lt;p&gt;Of course, we’re still only running the model, not really checking it. In the
next section, we’ll add something that fails on some interesting histories.&lt;/p&gt;

&lt;h2 id=&quot;discovering-interesting-histories&quot;&gt;Discovering Interesting Histories&lt;/h2&gt;

&lt;p&gt;Now we have our system specified, a model and the associated sizable state
space to explore - but we don’t actually know what we’re looking for. Hence,
let’s return to the algorithm at hand. The result of this section will be &lt;a href=&quot;https://github.com/tschottdorf/caspaxos-tla/commit/50229e7b8914d4d1f297940a4494b010377fccf8&quot;&gt;this
commit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Without formalizing it too much, we should care in one way or another whether
the “mutations line up”. That is, the values that the register stores over its
(in the model, very short) lifetime should be those that &lt;code class=&quot;highlighter-rouge&quot;&gt;Mutator&lt;/code&gt; creates
from their predecessors. Or, in the language of compare-and-swap, we shouldn’t
have one value stored in the register but then be able to run
a compare-and-swap that doesn’t respect this existing value.&lt;/p&gt;

&lt;p&gt;Let’s try to put this in a naive formula we can then have the model checker
verify for all states. Remember that “committed” below means that the value at
the corresponding ballot has been accepted by a majority of acceptors.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For any committed value v’ at ballot b’ &amp;gt; 0 and the previously committed value
v at ballot b &amp;lt; b’, it holds that v’ = Mutator(b’, v).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just to be clear, that assumption is not correct and perhaps you want to take
a minute with pen and paper and figure out why not. Or, in the spirit of this
section, let the model checker tell you why it’s wrong. But first we have to
turn those words into math!&lt;/p&gt;

&lt;p&gt;Taking the top-bottom approach, we add to our existing formula
&lt;code class=&quot;highlighter-rouge&quot;&gt;DesiredProperties&lt;/code&gt; two to-be-defined assertions:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DesiredProperties == /\ TypeOK
                     /\ OnlyOneValuePerBallot
                     /\ MutationsLineUp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OnlyOneValuePerBallot&lt;/code&gt; is easy to define; we just want to check that we never
accept conflicting values for a proposal. It’s fairly clear that that can’t
happen when you look at the algorithm, but it’s still good to have it checked:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OnlyOneValuePerBallot == \A b \in Ballot :
                            Cardinality(ValuesAt(b)) \leq 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;where &lt;code class=&quot;highlighter-rouge&quot;&gt;ValuesAt(b)&lt;/code&gt; are all the values for which we’ve seen accept responses
for ballot &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; (i.e. the value was accepted by the acceptor sending the
message):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ValuesAt(b) == IF b = 0 THEN {InitialValue}
               ELSE { v \in Values :
                        \E m \in msgs :
                            /\ m.type     = &quot;accept-rsp&quot;
                            /\ m.accepted = b
                            /\ \E mm \in msgs :
                                /\ mm.type   = &quot;accept-req&quot;
                                /\ mm.bal    = b
                                /\ mm.newVal = v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note how we had to comb through the accept requests to find the value; it’s not
sent out with the accept response since the recipient already knows it.&lt;/p&gt;

&lt;p&gt;Now for the prize:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MutationsLineUp ==
    \A b \in CommittedBallots \ {0} :
        LET newVal == UnwrapSingleton(ValuesAt(b))
            prevCommitBallot == BallotCommittedBefore(b)
            oldVal == UnwrapSingleton(ValuesAt(prevCommitBallot))
        IN  newVal = Mutator(b, oldVal)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;where &lt;code class=&quot;highlighter-rouge&quot;&gt;BallotCommittedBefore(b)&lt;/code&gt; is the largest ballot less than &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; for which
a value was committed (= accepted by a quorum, not necessarily &lt;code class=&quot;highlighter-rouge&quot;&gt;b-1&lt;/code&gt;!), and
&lt;code class=&quot;highlighter-rouge&quot;&gt;UnwrapSingleton&lt;/code&gt; turns a single-element set into its only element:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UnwrapSingleton(s) == CHOOSE v \in s : TRUE
AcceptedByQuorum(b) == \E Q \in Quorums: AcceptedBy(b) \cap Q = Q
CommittedBallots == {b \in Ballot : AcceptedByQuorum(b)} \cup {0}
BallotCommittedBefore(b) == CHOOSE c \in CommittedBallots :
                                /\ c &amp;lt; b
                                /\ \A cc \in CommittedBallots :
                                    cc \geq b \/ cc \leq c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;running-the-model&quot;&gt;Running the Model&lt;/h3&gt;

&lt;p&gt;As before, give the model a spin - note that since we extended
&lt;code class=&quot;highlighter-rouge&quot;&gt;DesiredProperties&lt;/code&gt;, the model checker is now checking more than before.&lt;/p&gt;

&lt;p&gt;And, lo and behold, after working for a short while, execution stops and we see
a complaint:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Invariant DesiredProperties is violated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In such a situation you can get lucky and that message will be accompanied by
a “stack trace” that allows you to find out which part of the formula made it
fail. Alas, not this one, but we get the complete history of state transitions
and a trace exploration tool. From it we can transcribe (your actual history
may vary):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ballot one and two: prepare request sent&lt;/li&gt;
  &lt;li&gt;ballot one and two, acceptor 1: prepare response sent (existing value 0)&lt;/li&gt;
  &lt;li&gt;ballot one, acceptor 2: prepare response sent (existing value 0)&lt;/li&gt;
  &lt;li&gt;ballot one: accept request sent for new value &lt;code class=&quot;highlighter-rouge&quot;&gt;1 = Mutator(one, 0)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;ballot one: acceptor 2: accept value 1&lt;/li&gt;
  &lt;li&gt;ballot two: acceptor 2: &lt;strong&gt;prepare response sent (existing value 1)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;ballot two: accept request sent for new value &lt;code class=&quot;highlighter-rouge&quot;&gt;3 = Mutator(two, 1)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;ballot two: acceptors 1 and 2: accept value 3&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DesiredProperties&lt;/code&gt; is violated because &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt; is committed, but not equal to
&lt;code class=&quot;highlighter-rouge&quot;&gt;0 = Mutator(zero, 0)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll discuss this and more in the next section.&lt;/p&gt;

&lt;h2 id=&quot;discussion-of-cas-paxos&quot;&gt;Discussion of CAS-Paxos&lt;/h2&gt;

&lt;p&gt;In the last section, we’ve discovered a history which violated our (naive) assumption that each committed value is born out of a mutation of a previous committed value: We run two ballots concurrently, and it just so happens that
without the first ballot ever committing, the second one gets to read its
value, base its mutation on it, and commit (by having two out of three
acceptors accept the ballot).&lt;/p&gt;

&lt;p&gt;Does this mean we’ve found an anomaly, or, finally getting more precise, does
this mean we’ve found a non-linearizable history? Let’s write this history up
from the perspective of linearizability:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;time=10&lt;/code&gt;: the register is initially &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; (which means that if you run an
instance of Single Decree Paxos, you learn the value &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;time=10&lt;/code&gt;: I dispatch &lt;code class=&quot;highlighter-rouge&quot;&gt;CAS(bar, baz)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;time=11&lt;/code&gt;: You dispatch &lt;code class=&quot;highlighter-rouge&quot;&gt;CAS(foo, bar)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;time=20&lt;/code&gt;: I hear back that my &lt;code class=&quot;highlighter-rouge&quot;&gt;CAS&lt;/code&gt; went through OK.&lt;/li&gt;
  &lt;li&gt;You never hear back.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that it doesn’t matter which of us dispatches their &lt;code class=&quot;highlighter-rouge&quot;&gt;CAS&lt;/code&gt; first. What
matters is that though you never learn whether your &lt;code class=&quot;highlighter-rouge&quot;&gt;CAS&lt;/code&gt; applied, it &lt;strong&gt;could&lt;/strong&gt;
have applied at any point in time with &lt;code class=&quot;highlighter-rouge&quot;&gt;time &amp;gt;= 11&lt;/code&gt;! So it’s easy to invent
legal points in time at which it applied so that things make sense:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;time=10&lt;/code&gt;: I dispatch &lt;code class=&quot;highlighter-rouge&quot;&gt;CAS(bar, baz)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;time=11&lt;/code&gt;: You dispatch &lt;code class=&quot;highlighter-rouge&quot;&gt;CAS(foo, bar)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;time=12&lt;/code&gt;: Your &lt;code class=&quot;highlighter-rouge&quot;&gt;CAS(foo, bar)&lt;/code&gt; commits&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;time=13&lt;/code&gt;: My &lt;code class=&quot;highlighter-rouge&quot;&gt;CAS(bar, baz)&lt;/code&gt; commits&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;time=20&lt;/code&gt;: I hear back that my &lt;code class=&quot;highlighter-rouge&quot;&gt;CAS&lt;/code&gt; went through OK.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So this history is linearizable. Note however that that doesn’t prove that the
system is! All we’ve managed to show is that it’s not broken for this
particular example.&lt;/p&gt;

&lt;p&gt;Looking back under the hood of how CAS-Paxos actually works, something
noteworthy &lt;em&gt;did&lt;/em&gt; happen that doesn’t reflect through the lens of
linearizablity: When “my” &lt;code class=&quot;highlighter-rouge&quot;&gt;PREPARE&lt;/code&gt; phase sends its first message, you had already gone ahead and got your new value &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt; accepted on one of the acceptors:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Values = [bar @ 1, foo @ 0, foo @ 0]     # value @ ballot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When you look at the system in that state from the outside, you might be
tempted to say that the register stores the value &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; (after all, that’s the
value you can find on a majority). But that’s not correct! If you want to read
the value, you must run a full phase of Single Decree Paxos. And that would
either:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;talk to a majority that has &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt;, and have &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt; committed at the end:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Values = [bar @ 2, bar @ 2, foo @ 0 or bar @ 2]&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;talk to a majority that does not have &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt;, and commit a “newer” copy of
&lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; at the end:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Values = [bar @ 1 or foo @ 2, foo @ 2, foo @ 2]&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That is, until you actually go and read the register, it doesn’t necessarily “have”
a value - if in the examples below we didn’t run &lt;code class=&quot;highlighter-rouge&quot;&gt;ACCEPT&lt;/code&gt;, you could contact
one majority first, and then the other, and you would get different values
though nobody else is using the system - definitely not linearizable!&lt;/p&gt;

&lt;p&gt;Reading the value thus requires participating in deciding it. But it should be
possible to skip the &lt;code class=&quot;highlighter-rouge&quot;&gt;ACCEPT&lt;/code&gt; phase if you receive the same ballot from all
possible acceptors (three in the above example).&lt;/p&gt;

&lt;p&gt;Something similar, though less transparently, happened when my &lt;code class=&quot;highlighter-rouge&quot;&gt;PREPARE&lt;/code&gt; phase
picked up your value which you had managed to get accepted at only one of the
nodes: It “implicitly” committed it when it committed its own update. And,
actually, since your partial value might have in turn been based on a previous
not-explicitly-committed value as well, that was also implicitly committed, and
so on. In a different possible outcome, I wouldn’t have found your value, and
would have implicitly made sure that it would never be visible, as if you had
never tried to write it. That, too, is legal.&lt;/p&gt;

&lt;p&gt;This also gives an intuitive understanding of why CAS-Paxos should be
linearizable: the state of the system after a successful CAS based on an
uncommitted value is equivalent to one in which you “make up” accept messages
to accept that value (at its home ballot) between the main operation’s
&lt;code class=&quot;highlighter-rouge&quot;&gt;PREPARE&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ACCEPT&lt;/code&gt; phases. Then you only have to consider the case where
every value you see is committed, and that argument should be very similar to
that that assures that a Single Decree Paxos register never “loses”
a once-committed value.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Values = [bar @ 1, foo @ 0, foo @ 0]
Values = [bar @ 1, bar @ 1, bar @ 1] # implicit
Values = [baz @ 2, baz @ 2, foo @ 0]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;runaway-commit&quot;&gt;Runaway Commit&lt;/h3&gt;

&lt;p&gt;The fact that one proposal might pick up a previous incomplete proposal has
practical implications on the proposer running the incomplete proposal. From
its point of view, when it continues the &lt;code class=&quot;highlighter-rouge&quot;&gt;ACCEPT&lt;/code&gt; phase, it will be told by
other acceptors that a conflicting proposal has superseded its own. But, it has
no way of finding out whether its value did make it into the system or whether
it was wiped out by the concurrent proposal. Paxos (CAS or Single Decree)
doesn’t fare too well when there is a lot of concurrent proposing going on
anyway, so this may not be much of an issue (and if it were, some extra state
could be kept around by the acceptors to mitigate).&lt;/p&gt;

&lt;h3 id=&quot;properly-failing-a-cas&quot;&gt;Properly Failing a CAS&lt;/h3&gt;

&lt;p&gt;So far, we have neglected the case in which a compare-and-swap operation fails,
and in particular that in which it fails because the “previous value” is not
the required one. Naively, you would perhaps consider the following behavior:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;run a &lt;code class=&quot;highlighter-rouge&quot;&gt;PREPARE&lt;/code&gt; phase and collect responses from a majority&lt;/li&gt;
  &lt;li&gt;if the value with the highest ballot does not match what we expect, tell the
client the &lt;code class=&quot;highlighter-rouge&quot;&gt;CAS&lt;/code&gt; failed: “I tried, but the register does not hold the value
you thought it did”.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But that’s incorrect! Consider again the case of a partially committed value:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Values = [`bar` @ 1, `foo` @ 0, `foo` @ 0]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;PREPARE&lt;/code&gt; phase for &lt;code class=&quot;highlighter-rouge&quot;&gt;CAS(foo, boo)&lt;/code&gt; might pick up &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt; as the most recent
value, the client is told that the register doesn’t hold the value &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;.
But next, the client reads the register, winds up talking to the majority that
doesn’t have &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt;, and learns that the value is indeed &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; - we’ve got
ourselves into a nonlinearizable history.&lt;/p&gt;

&lt;p&gt;Instead, a CAS which finds an incompatible value after &lt;code class=&quot;highlighter-rouge&quot;&gt;PREPARE&lt;/code&gt; must run an
&lt;code class=&quot;highlighter-rouge&quot;&gt;ACCEPT&lt;/code&gt; phase with that incompatible value, because only when that succeeds is
it allowed to tell the client with authority that the register did not hold the
correct base value. Or, it could return a more generic error to the client
which doesn’t make any statement about the value of the register, but usually
you want a failed CAS to report the actual value of the register, and that
definitely needs the &lt;code class=&quot;highlighter-rouge&quot;&gt;ACCEPT&lt;/code&gt; phase.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;We’ve introduced the CAS-Paxos algorithm, specified it in TLA+ and discussed
some interesting histories, phenomena, and implications on practical
implementations. Intuitively, we have seen that there is reason to believe that
CAS-Paxos provides a distributed linearizable register with compare-and-swap
semantics, which is a powerful primitive for building distributed systems.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Gryadka is not Paxos, so it's probably wrong (RETRACTED)</title>
   <link href="http://tbg.github.io//if-its-not-paxos-its-probably-wrong-gryadka"/>
   <updated>2017-03-23T00:00:00+00:00</updated>
   <id>http://tbg.github.io//consensus-is-hard-gryadka</id>
   <content type="html">&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://lamport.azurewebsites.net&quot;&gt;Leslie Lamport&lt;/a&gt; purportedly once said (though I can’t prove it):&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If it’s not Paxos, it’s probably wrong.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the original version of this post, I claimed that &lt;a href=&quot;https://github.com/gryadka/js&quot;&gt;gryadka&lt;/a&gt;, which
claims to be built on top of a Paxos-backed CAS register, was incorrect by
providing a “counter-example”.&lt;/p&gt;

&lt;p&gt;It turns out that you really drop 20 IQ points on a vacation, and that I had
not at all provided a counter-example, despite having looked closely at the
algorithm.&lt;/p&gt;

&lt;p&gt;My claim that the Paxos-style CAS register exhibited anomalies is thus wrong
(or, at least, unproven).&lt;/p&gt;

&lt;p&gt;My apologies to &lt;a href=&quot;https://twitter.com/rystsov&quot;&gt;@rystsov&lt;/a&gt;, who kindly pointed out my mistake. I’ll
look into the algorithm more (post-vacation), but now considering that it might
be correct, which would be quite exiting - perhaps there are Paxos-like things
which are not Paxos but are not wrong.&lt;/p&gt;

&lt;p&gt;The original version of this post is available in the &lt;a href=&quot;https://github.com/tschottdorf/tschottdorf.github.io&quot;&gt;commit history&lt;/a&gt;,
preserved for posterity. My mistake not carrying out the read phase in the
middle fully: If you do, then you’ll commit the old value “again”, making the
anomaly-exhibiting later CAS fail.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Sabbatical Reading List: Linux x64 Exploits</title>
   <link href="http://tbg.github.io//sabbatical-linux-x64-exploits"/>
   <updated>2017-01-22T00:00:00+00:00</updated>
   <id>http://tbg.github.io//sabbatical-linux-exploits</id>
   <content type="html">&lt;p&gt;As a software engineer who (presumably) does their homework, one knows that
many things that make your program crash can also make your program
exploitable, and so naturally a lot of energy goes into avoiding those
conditions - don’t use-after-free, don’t leak variables from the stack, yadda
yadda.&lt;/p&gt;

&lt;p&gt;But of course the other side of the coin - how to exploit mistakes when they happen - is
interesting in its own right and a great way to understand how computers
&lt;strong&gt;really&lt;/strong&gt; work at a low level. Most probably have a basic idea - change the
return address to jump to code that syscalls and gives you a shell - but in
reality trivial attacks like this are rarely possible and one must use more
more and more sophisticated and quite creative tactics.&lt;/p&gt;

&lt;p&gt;Wanting to look into this, I found a great primer for a deep-dive into the
real world of Linux exploits, as well as some “real” exploits to read up on.&lt;/p&gt;

&lt;p&gt;Of course, there’s much more out there, and looking into some of the above is
likely to lead to hours spent reading up on random things. You’ve been warned.&lt;/p&gt;

&lt;p&gt;Let’s start with the aptly named:&lt;/p&gt;

&lt;h4 id=&quot;linux-x86-exploit-development-tutorial-series&quot;&gt;Linux x86 Exploit Development Tutorial Series&lt;sup id=&quot;fnref:sploitfun&quot;&gt;&lt;a href=&quot;#fn:sploitfun&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h4&gt;

&lt;p&gt;Starting from the classic stack and heap overflows, this series of blog posts
by user @sploitfun quickly becomes more
advanced and addresses bypassing, among others, memory-based protection and
address randomization.&lt;/p&gt;

&lt;p&gt;There really isn’t much else to say; it’s good, I think in parts because it’s
written by someone who knows what they’re talking about, but not to the point
of thinking everything is trivial.&lt;/p&gt;

&lt;p&gt;Having read that, I went on to read up on real exploits which were dissected by
capable internet educators. Some favorites follow:&lt;/p&gt;

&lt;h4 id=&quot;the-linux-pi-self-requeue-bug-aka-towelroot-2014&quot;&gt;The Linux PI self-requeue bug&lt;sup id=&quot;fnref:requeue&quot;&gt;&lt;a href=&quot;#fn:requeue&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, aka towelroot (2014)&lt;/h4&gt;

&lt;p&gt;This bug in some past versions of the Linux kernel (until fixed in 2014) is in
the futex code. Futexes are &lt;em&gt;fast userspace mutexes&lt;/em&gt;, and they are
tricky&lt;sup id=&quot;fnref:drepper-futex&quot;&gt;&lt;a href=&quot;#fn:drepper-futex&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;The bug is, very roughly, that there is an operation
that moves waiters of one futex over to another futex, and that the
implementation of this operation didn’t deal properly with being handed the
&lt;em&gt;same futex&lt;/em&gt; for both.&lt;/p&gt;

&lt;p&gt;What it did in this case was allocate a list element which lives on the stack,
&lt;em&gt;expecting&lt;/em&gt; that this element would be no more on the list by return time, due
to the way the code was supposed to work. But in that special, artificial case,
an early return meant that the list would now contain an element in memory that
was on the stack of that particular method call. Stack memory gets reused, and you
can set up function invocations that manipulate this list element’s pointers
such that when it’s deleted, a write in your favor occurs.&lt;/p&gt;

&lt;p&gt;This and its implications (one way of rooting some versions of android) are
very digestibly explained online&lt;sup id=&quot;fnref:towelroot&quot;&gt;&lt;a href=&quot;#fn:towelroot&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; on the &lt;a href=&quot;http://tinyhack.com&quot;&gt;tinyhack
blog&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;stack-jacking---your-way-to-grsecpax-bypass-2011&quot;&gt;Stack Jacking - Your Way To GRSec/Pax Bypass (2011)&lt;sup id=&quot;fnref:stackjack&quot;&gt;&lt;a href=&quot;#fn:stackjack&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/h4&gt;

&lt;p&gt;This is a blog post and associated slide deck from
&lt;a href=&quot;http://infiltratecon.org&quot;&gt;Infiltrate&lt;/a&gt; 2011
which explicitly attacks Linux in the presence of grsecurity/PaX. What stood
out to me is how clearly the ingredients are defined and used; it’s not just
a magical chaining of steps that leads to magical outcome.&lt;/p&gt;

&lt;p&gt;This is because it’s
not a &lt;em&gt;concrete&lt;/em&gt; exploit: it’s an exploration of what’s needed to exploit
hardened Linux (the answer is that it’s very hard), and the folks at grsecurity
immediately reacted, so that all techniques presented are long dead&lt;sup id=&quot;fnref:spender&quot;&gt;&lt;a href=&quot;#fn:spender&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;.
Still, it’s very instructive, and teaches you a fair bit about how the kernel
bookkeeps its processes along the way.&lt;/p&gt;

&lt;p&gt;The basic ingredient they define is an arbitrary kernel write. This isn’t
something that happens every day, but does. However, note that
during the presentation, they simply compiled a kernel with an &lt;em&gt;intentional
bug&lt;/em&gt; as a starting point.&lt;/p&gt;

&lt;p&gt;This would be home free for a conventional Linux kernel, but under
grsecurity/PaX plus self-imposed extra assumptions (zero knowledge of address
space, with everything randomized, …), you have no idea where to write, and
what.&lt;/p&gt;

&lt;p&gt;Where you eventually want to write is the credentials struct of the process (in
order to escalate privileges), which is reachable from the base of the process’
kernel stack; you need to be able to leak the base address to userspace and
that is often possible and the second ingredient&lt;sup id=&quot;fnref:caveat1&quot;&gt;&lt;a href=&quot;#fn:caveat1&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Then, to navigate to the creds struct, you need arbitrary reads, for which they
present two techniques (the simpler one simply uses the kwrite near the base of
the kernel stack to allow the process to read what it wants). And that is where
you write and win, using the first ingredient.&lt;/p&gt;

&lt;h4 id=&quot;chrome-exploits&quot;&gt;Chrome exploits&lt;/h4&gt;

&lt;p&gt;Thanks to the &lt;a href=&quot;https://blog.chromium.org/2012/02/pwnium-rewards-for-exploits.html&quot;&gt;Pwnium
competition&lt;/a&gt;,
in recent years some attacks against Google’s Chrome browser have been
well-publicized and analyzed. The gold standard here is generally breaking out
of the sandbox, and while I don’t think I really learned too much fundamentals
from them, they make for excellent competence porn&lt;sup id=&quot;fnref:competence&quot;&gt;&lt;a href=&quot;#fn:competence&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;For example, watch &lt;a href=&quot;https://blog.chromium.org/2012/05/tale-of-two-pwnies-part-1.html&quot;&gt;Pinkie Pie chain
six different bugs to break out of the sandbox&lt;/a&gt; or &lt;a href=&quot;https://scarybeastsecurity.blogspot.com.ar/2013/02/exploiting-64-bit-linux-like-boss.html&quot;&gt;exploit a WebKit use-after-free bug for a coveted 64-bit
exploit&lt;/a&gt;, awarded a total of $100.000 by Google.&lt;/p&gt;

&lt;p&gt;Especially the second one is fascinating because it has to abuse the
use-after-free condition by carefully laying out and manipulating memory,
taking into account tcmalloc’s bucket sizes and where it will put the next
object - and all of that has to be done from JavaScript. It’s a bit like
watching a neurosurgeon who’s handed pliers go at it and make it happen.&lt;/p&gt;

&lt;p&gt;Then, realize that &lt;em&gt;Pinkie Pie&lt;/em&gt;, the author of the two exploits, was a teenager at
the time, and nod respectfully.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:sploitfun&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://sploitfun.wordpress.com/2015/06/26/linux-x86-exploit-development-tutorial-series/&quot;&gt;Linux x86 Exploit Development Tutorial Series&lt;/a&gt;. &lt;a href=&quot;#fnref:sploitfun&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:requeue&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://hackerone.com/reports/13388&quot;&gt;Linux PI futex self-requeue bug&lt;/a&gt;, Nicholas Allegra, 2014. &lt;a href=&quot;#fnref:requeue&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:drepper-futex&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.akkadia.org/drepper/futex.pdf&quot;&gt;Futexes Are Tricky&lt;/a&gt;, Ulrich Drepper, 2011. &lt;a href=&quot;#fnref:drepper-futex&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:towelroot&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://tinyhack.com/2014/07/07/exploiting-the-futex-bug-and-uncovering-towelroot/&quot;&gt;Exploiting the futex bug and uncovering towelroot&lt;/a&gt;, @tinyhack, 2014. &lt;a href=&quot;#fnref:towelroot&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:stackjack&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://jon.oberheide.org/blog/2011/04/20/stackjacking-your-way-to-grsec-pax-bypass/&quot;&gt;Stack Jacking - Your Way To GRSec/Pax Bypass&lt;/a&gt;, Jon Oberheide and Dan Rosenberg, 2011. &lt;a href=&quot;#fnref:stackjack&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:spender&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://forums.grsecurity.net/viewtopic.php?f=7&amp;amp;t=2596&quot;&gt;Much Ado About Nothing: A Response in Text and Code&lt;/a&gt;, @spender, 2011. &lt;a href=&quot;#fnref:spender&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:caveat1&quot;&gt;
      &lt;p&gt;in the presentation, a suitably old kernel was used that exhibits such a bug, but according to the slides, apparently they are common and considered relatively “harmless” by the Linux maintainers. &lt;a href=&quot;#fnref:caveat1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:competence&quot;&gt;
      &lt;p&gt;“Competence porn is a plot with a type of character who is insanely good at something - usually involving some plot-twisting plans.” - &lt;a href=&quot;https://www.urbandictionary.com/define.php?term=competence%20porn&quot;&gt;urbandictionary&lt;/a&gt;. &lt;a href=&quot;#fnref:competence&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Sabbatical Reading List: The Feynman Lectures</title>
   <link href="http://tbg.github.io//sabbatical-feynman-lectures"/>
   <updated>2017-01-20T00:00:00+00:00</updated>
   <id>http://tbg.github.io//sabbatical-feynman-lectures</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;I’m on sabbatical, so I get to look into things without the distractions of
my day-to-day job. This is one of them.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Feynman was not a saint&lt;sup id=&quot;fnref:not-saint&quot;&gt;&lt;a href=&quot;#fn:not-saint&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, but without doubt one of the geniuses of the 20th
century. And I am, without doubt, someone who in their confused highschool
years took the &lt;em&gt;genius&lt;/em&gt; decision to opt out of physics once that was
possible, presumably to spend more time staring at a computer screen).&lt;/p&gt;

&lt;p&gt;Three months ago, with half a year of sabbatical at my disposal, I found myself
picking up (i.e. navigating my browser to) the freely available &lt;em&gt;Feynman
Lectures on Physics&lt;/em&gt;&lt;sup id=&quot;fnref:lectures&quot;&gt;&lt;a href=&quot;#fn:lectures&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; and have since had trouble putting
them down.&lt;/p&gt;

&lt;p&gt;Feynman was sometimes referred to as “The Great Explainer”, referring to his
uncanny ability to decompose and boil down the complicated until it looked
simple and digestible, for leaving no stone unturned, and for playfully
handholding his audience to a deep understanding of the matter at hand, one
toy example at a time.&lt;/p&gt;

&lt;p&gt;Hopping on Feynman’s bandwagon works well only to some extent, though. What you
get are lucid explanations and great intuition about physical processes, with
lots of little examples to &lt;em&gt;really&lt;/em&gt; make you understand how it works.&lt;/p&gt;

&lt;p&gt;What you don’t get are solid proofs. You could say, who needs a proof when
intuition makes it all clear as day? And I, with a doctorate in a heavily
physics-influenced part of pure mathematics&lt;sup id=&quot;fnref:pde&quot;&gt;&lt;a href=&quot;#fn:pde&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, would agree and trust myself to be
able to spot sketchy arguments.&lt;/p&gt;

&lt;p&gt;But - in volume two of the same Feynman Lectures, Feynman got the Faraday
cage&lt;sup id=&quot;fnref:cage&quot;&gt;&lt;a href=&quot;#fn:cage&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; shielding effect completely wrong: He
predicts shielding &lt;em&gt;exponential&lt;/em&gt; in the mesh gap, while it’s in fact
&lt;em&gt;linear&lt;/em&gt;&lt;sup id=&quot;fnref:mistake&quot;&gt;&lt;a href=&quot;#fn:mistake&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;.
The mistake is assuming that the wires (discs in 2D) of the cage can be made
infinitely thin. But going from constant-voltage discs to point charges changes
the question you’re answering.&lt;/p&gt;

&lt;p&gt;That is one thing, but we all make mistakes. The other caveat is that once you
get into the quantum world, you will have to face the fact that Feynman was
fundamentally a “particles guy”, which is problematic because particles are
just a sometimes convenient way of talking about fields which are highly
localized, but not a fundamental concept.&lt;/p&gt;

&lt;p&gt;Assuming the particle perspective when that doesn’t apply brings up apparently
paradox situations such as that observed in the double-slit experiment, which
isn’t a paradox when you realize you’re observing &lt;em&gt;fields&lt;/em&gt;. In short, &lt;em&gt;there
are no particles, there are only fields&lt;/em&gt;&lt;sup id=&quot;fnref:only-fields&quot;&gt;&lt;a href=&quot;#fn:only-fields&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;, and
Feynman appears to be on the wrong side of teaching history (while certainly
having been on the right one scientifically). At least, as the
article&lt;sup id=&quot;fnref:only-fields:1&quot;&gt;&lt;a href=&quot;#fn:only-fields&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; 
points out, most of teaching is on the wrong side of history on that point,
presumably due to the fact that particles come naturally to humans and even
more so when you enter the quantum world through classical Newtonian mechanics.&lt;/p&gt;

&lt;p&gt;There also aren’t any exercises in the original lectures, though a list is
maintained at CalTech, along with errata and notes&lt;sup id=&quot;fnref:lectures:1&quot;&gt;&lt;a href=&quot;#fn:lectures&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. For more
complete coverage, a book exists&lt;sup id=&quot;fnref:exercises&quot;&gt;&lt;a href=&quot;#fn:exercises&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;, but reviews point out that many
problems are presented without a solution, which can be off-putting.&lt;/p&gt;

&lt;p&gt;With that in mind, I have so far passed many hours reading my way towards the
end of volume one of the lectures and, so far, I can strongly recommend them.
Imagining myself in my first semester in this class (as it was originally
taught) would’ve surely steamrolled me.&lt;/p&gt;

&lt;p&gt;But maybe that’s what it means to study physics?&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:not-saint&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://galileospendulum.org/2014/07/13/the-problem-of-richard-feynman/&quot;&gt;The problem of Richard Feynman&lt;/a&gt;. &lt;a href=&quot;#fnref:not-saint&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:lectures&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.feynmanlectures.info/&quot;&gt;feynmanlectures.info&lt;/a&gt; &lt;a href=&quot;#fnref:lectures&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:lectures:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:pde&quot;&gt;
      &lt;p&gt;Partial Differential Equations, more precisely the analysis of nonlinear dispersive equations, and even more precisely, a result on some &lt;a href=&quot;https://arxiv.org/abs/1209.1518&quot;&gt;quadratic Klein-Gordon equations&lt;/a&gt;. &lt;a href=&quot;#fnref:pde&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:cage&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Faraday_cage&quot;&gt;Faraday cage (Wikipedia)&lt;/a&gt; &lt;a href=&quot;#fnref:cage&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:mistake&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://sinews.siam.org/Details-Page/surprises-of-the-faraday-cage&quot;&gt;Surprises of the Faraday Cage&lt;/a&gt;, Lloyd N. Trefethen, 2016. &lt;a href=&quot;#fnref:mistake&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:only-fields&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://arxiv.org/abs/1204.4616&quot;&gt;There are no particles, there are only fields&lt;/a&gt;, Art Hobson, 2012. &lt;a href=&quot;#fnref:only-fields&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:only-fields:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:exercises&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Exercises-Feynman-Lectures-Physics-Richard/dp/0465060714&quot;&gt;Exercises for the Feynman Lectures on Physics&lt;/a&gt; on Amazon.com. &lt;a href=&quot;#fnref:exercises&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Distributed Consensus In Practice</title>
   <link href="http://tbg.github.io//distributed-consensus-in-practice"/>
   <updated>2016-07-24T00:00:00+00:00</updated>
   <id>http://tbg.github.io//consensus-in-practice</id>
   <content type="html">&lt;p&gt;&lt;em&gt;This post originally appeared on the &lt;a href=&quot;https://blog.cockroachlabs.com&quot;&gt;Cockroach Labs blog&lt;/a&gt; as &lt;a href=&quot;https://www.cockroachlabs.com/blog/consensus-made-thrive/&quot;&gt;Consensus, Made Thrive&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When you write data to &lt;a href=&quot;https://github.com/cockroachdb/cockroach&quot;&gt;CockroachDB&lt;/a&gt; (for example, if you insert a row into a table through the &lt;a href=&quot;https://www.cockroachlabs.com/docs/use-the-built-in-sql-client.html&quot;&gt;SQL client&lt;/a&gt;), we take care of replication for you. To do this, we use a &lt;a href=&quot;https://en.wikipedia.org/wiki/Consensus_(computer_science)&quot;&gt;consensus protocol&lt;/a&gt; – an algorithm which makes sure that your data is safely stored on multiple machines, and that those machines agree on the current state even if some of them are temporarily disconnected.&lt;/p&gt;

&lt;p&gt;In this post, I will give an overview of common implementation concerns and how we address these concerns in CockroachDB. Then I will abandon these earthly constraints and explore how we could improve consensus algorithms. Specifically, what would it take to make them faster?&lt;/p&gt;

&lt;h2 id=&quot;consensus-algorithms-applied&quot;&gt;Consensus Algorithms Applied&lt;/h2&gt;

&lt;p&gt;Consensus algorithms are inherently distributed, and the problem they solve is fundamental to any piece of software which wants to keep a consistent state across multiple machines. After several decades, the body of research on them seemingly presents you with a variety of implementations options to choose from. However, as pointed out in &lt;a href=&quot;http://research.google.com/archive/paxos_made_live.html&quot;&gt;Google’s “Paxos Made Live”&lt;/a&gt;, &lt;em&gt;using consensus algorithms in the real world is not quite as simple&lt;/em&gt;: the things that matter most for real implementations are often mere side notes in their respective papers.&lt;/p&gt;

&lt;p&gt;A typical consensus algorithm accepts operations from a client, and puts them in an ordered log (which in turn is kept on each of the replicas), acknowledging an operation as successful to the client once it is known that the operation has been persisted in a majority of the replicas’ logs. Each of the replicas in turn execute operations from that log in order, advancing their state. This means that at a fixed point in time, the replicas may not be identical, but they are advancing through the same log (meaning that if you give them time to all catch up, they will be in the same state) – the best you can hope for in a distributed system.&lt;/p&gt;

&lt;h2 id=&quot;typical-concerns-when-implementing-a-consensus-algorithm&quot;&gt;Typical Concerns When Implementing a Consensus Algorithm:&lt;/h2&gt;

&lt;p&gt;Log Truncation: Having all of the operations in an ordered log is fine, but that log can’t grow forever! When all replicas have caught up, older log entries should be discarded.
Snapshotting: Since the log can’t be kept forever, after an extended period of downtime of a replica, there must be an alternative way of catching it up. The only option is transferring a snapshot of the data and a log position from which to resume.
Membership Changes: These are very tricky to get right. As we add a replica to the group, the size of a majority changes. A lot of decisions have to be made: which majority size is active while the membership changes? Does the new replica have any say in the group while it’s being added? When does it receive a snapshot? Can a snapshot be sent before the membership change is carried out, to minimize the impact of the change? Removal is similarly iffy, and the consensus group is typically more vulnerable while the process is ongoing.
Replay Protection: commands proposed by a client may be executed multiple times (or never, depending on the implementation). While one client proposal ideally leads to exactly one executed command in almost all cases, &lt;a href=&quot;http://bravenewgeek.com/you-cannot-have-exactly-once-delivery/&quot;&gt;general exactly-once delivery is impossible in a distributed system&lt;/a&gt;. In practice, this means keeping state about already executed commands, or even better, using only idempotent commands.
Read Leases: when using a vanilla consensus protocol, all read operations of the replicated state have to go through that consensus protocol, or they may read stale data&lt;sup&gt;[1]&lt;/sup&gt;, which is a consistency violation. In many applications, the vast majority of operations are reads, and going through consensus for those can be prohibitively expensive.
These and many others (which aren’t as readily summarized) make it hard to work an instance of a consensus protocol into a real application, let alone thousands of them.&lt;/p&gt;

&lt;h2 id=&quot;raft-made-live&quot;&gt;“Raft Made Live”&lt;/h2&gt;

&lt;p&gt;At CockroachDB, we have most of the above concerns sufficiently covered. The author of Raft, our consensus protocol of choice, did a pretty good job at providing comprehensive instructions for much of the above. We truncate our log appropriately, regardless of whether all replicas &lt;a href=&quot;https://github.com/cockroachdb/cockroach/pull/7438&quot;&gt;are up or not&lt;/a&gt;. We send snapshots when appropriate, and soon we will also send &lt;a href=&quot;https://github.com/cockroachdb/cockroach/pull/7468&quot;&gt;pre-emptive snapshots&lt;/a&gt; during membership changes. We implement replay protection using &lt;a href=&quot;https://en.wikipedia.org/wiki/Multiversion_concurrency_control&quot;&gt;MVCC&lt;/a&gt; and a &lt;a href=&quot;https://github.com/cockroachdb/cockroach/pull/6961&quot;&gt;consensus-level component&lt;/a&gt;. And, last but not least, we have a stable leading replica which gets to serve reads locally.&lt;/p&gt;

&lt;p&gt;That’s all fine and well, but there are various areas of improvement. Let’s leave behind the realm of what’s been implemented (at least in CockroachDB, and probably almost everywhere else) and talk about what should be possible in an ideal world.&lt;/p&gt;

&lt;h2 id=&quot;consensus-is-like-caviar-too-expensive-to-splurge-on&quot;&gt;Consensus is like caviar: too expensive to splurge on&lt;/h2&gt;

&lt;p&gt;The most obvious problem with distributed consensus is that it’s inherently slow. A typical consensus operation goes as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                                  CLIENT
                                    |  ʌ
                                (1) |  | (4)
                                    v  |
                                   LEADER
                               [node1, Oregon]
                                 /  ʌ    \
                          (2)  /  / (3)    \ (5)
                             /  /            \
                           v  /                v
                        FOLLOWER            FOLLOWER
                   [node2, California]  [node3, Virginia]
                                         (responds later)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A client sends a request to the leader. In turn, the leader must talk to a majority of nodes (including itself), i.e. in the picture it would have to wait for one of the followers (for simplicity we assume that node three is always last). In simple math, assuming that actual message processing takes no time, we get&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;commit_latency = round_trip(client, leader) + round_trip(leader, follower)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This internal coordination is expensive, and while it’s unavoidable, we can see that the price tag depends heavily on the location of the client. For example, with a client in Oregon, we have roughly zero latency from the client to the leader, and ~30ms round-trip between the leader and the follower in Virginia, for a total commit latency of about 30ms. That doesn’t sound so bad, but let’s look at a client on the east coast instead – it would presumably be close to our Virginia data center, but that doesn’t matter – the leader is in Oregon, and we pay perhaps an 80ms round trip to it, plus the same 30ms as before, adding up to a hefty 110ms.&lt;/p&gt;

&lt;p&gt;This goes to show that once you have consensus, you will do all you can to reduce the time you wait for those transcontinental (or even transmundial) TCP packets. For example, you could ask yourself why in that last example the client couldn’t talk directly to the node in Virginia.&lt;/p&gt;

&lt;p&gt;There is a relatively recent consensus protocol called EPaxos which allows this&lt;sup&gt;[2]&lt;/sup&gt;, though we’ll save it for another blog post. Today, we’re going to deal with a more modest question:&lt;/p&gt;

&lt;h2 id=&quot;can-we-make-reads-cheaper&quot;&gt;Can we make reads cheaper?&lt;/h2&gt;

&lt;p&gt;Read operations may seem innocuous at first. They get served from the leader because that replica is the only one that can guarantee that it’s not reading stale data (since it decides when write operations commit), but read operations don’t have to go through consensus themselves. This means that for our example, we shave 30ms of the commit latency if we only read data. However, reads are still expensive when you’re far away from the leader. It seems silly that the client in Virginia can’t read from its local node; sure would be nice to do better, right? And you can! (At least in the literature.)&lt;/p&gt;

&lt;p&gt;The idea is simple:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;By letting the consensus group agree that commands must be committed by a special majority of the nodes as opposed to any majority, the nodes in that special majority can be sure to be informed about the latest state of the system.
For example, in the above picture, we could set things up so that all nodes agree that nodes one and two are to be included in any majority when committing commands (regardless of who the leader is), and then these replicas could serve reads which are consistent with the consensus log. The resulting algorithm is investigated (in higher generality) in &lt;a href=&quot;https://www.cs.cmu.edu/~dga/papers/leases-socc2014.pdf&quot;&gt;Paxos Quorum Leases: Fast Reads Without Sacrificing Writes&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In a simpler world, modulo the usual implementation headaches, that could be the end of the story – but there’s an additional bit of complexity hidden here: the fact that CockroachDB is not a simple replicated log, but a full-fledged MVCC database. This means that the key-value pairs we store have a logical timestamp attached to them, and the one invariant that we must uphold is the following:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If a value was ever read at some timestamp, it can only be mutated at higher timestamps.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That makes perfect sense if you think about it – if you read a certain value at some timestamp, then I should not be able to perform a write that changes the value you already observed.&lt;/p&gt;

&lt;p&gt;On the leader, this is achieved by keeping an in-memory timestamp cache – a data structure which given a key and a timestamp will tell you whether the key was read at a higher timestamp previously. This structure must be consulted before proposing a write to consensus to guard us against the scenario described above – if there was such a read, we can’t perform the write.&lt;/p&gt;

&lt;p&gt;If local reads were served at another replica, naively the leader would have to be notified about that synchronously (in order to write to the timestamp cache) before returning the result of the read to the client – the very thing we wanted to avoid! Or, somewhat better, we could let reads remain cheap for the most part and shift complexity onto writes, requiring them to contact the special majority before proposing to confirm that writing at this timestamp is still possible, and prompting the special majority to not serve reads with conflicting timestamps (at least until they see our command pop out of the consensus protocol).&lt;/p&gt;

&lt;p&gt;Another (much more complicated) option is to incorporate that feature at the consensus level by allowing replicas to reject commands before the commit. In that scenario, roughly the following would occur:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Follower 1 serves a local read at timestamp, say, &lt;code class=&quot;highlighter-rouge&quot;&gt;ts=15&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;A client asks the leader to write that same key at timestamp &lt;code class=&quot;highlighter-rouge&quot;&gt;ts=9&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The leader proposes a corresponding command to consensus.&lt;/li&gt;
  &lt;li&gt;The consensus algorithm on the leader tries to replicate this command to a majority of followers (including the special majority).&lt;/li&gt;
  &lt;li&gt;Each follower checks the command for timestamp cache violations. Some followers may acknowledge the proposal, but on Follower 1, it is rejected due to already having served a read for &lt;code class=&quot;highlighter-rouge&quot;&gt;ts=15&lt;/code&gt; prior to the write at &lt;code class=&quot;highlighter-rouge&quot;&gt;ts=9&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The leader, upon receiving the rejection, informs the client and cancels replication of the command suitably (either by turning it into a no-op or by unregistering it completely, depending on what’s possible).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To the best of my knowledge, such an addition has not been considered for any consensus protocol (and in particular not for the one of most interest to us, Raft). Allowing individual replicas to reject certain commands ad-hoc (i.e. basing their decision on auxiliary unreplicated state) must be considered very carefully and adds considerable complexity (in particular when leadership changes as these commands are in flight).&lt;/p&gt;

&lt;p&gt;Performing that work is likely a small research paper and a bunch of implementation, but in contrast to many other more complicated endeavor, it seems within reach (and with it, serving local reads from some replicas).&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Our usage of consensus algorithms in CockroachDB is fairly standard and covers all the basic needs – but taking a step up is something we’ll be working on in the future. While the likely next step is serving reads from (some) followers, techniques which save round-trips on writes are also appealing, but those go extremely deep down the rabbit hole (and have new, much deeper challenges with respect to serving local reads). As usual, distributed consensus is hard. And if that’s just your cup of tea, &lt;a href=&quot;https://www.cockroachlabs.com/careers/&quot;&gt;you could have that tea every day&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[1] Even if the client attempts to talk to the master node, the node it talks to may not be the actual master (though it may think it is), and so commands which have already committed and influenced the outcome of our read may not yet have been executed on the node we’re reading from yet – this violates linearizability on a single register.&lt;/p&gt;

&lt;p&gt;[2] &lt;a href=&quot;https://www.cs.cmu.edu/~dga/papers/epaxos-sosp2013.pdf&quot;&gt;Egalitarian Paxos (There Is More Consensus In Egalitarian
Parliaments)&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Cgo And Its Cost</title>
   <link href="http://tbg.github.io//cgo-and-its-cost"/>
   <updated>2016-07-24T00:00:00+00:00</updated>
   <id>http://tbg.github.io//cgo-and-its-cost</id>
   <content type="html">&lt;p&gt;&lt;em&gt;This post originally appeared on the &lt;a href=&quot;https://blog.cockroachlabs.com&quot;&gt;Cockroach Labs blog&lt;/a&gt; as &lt;a href=&quot;https://www.cockroachlabs.com/blog/the-cost-and-complexity-of-cgo/&quot;&gt;The Cost and Complexity of Cgo&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.golang.org/c-go-cgo&quot;&gt;Cgo&lt;/a&gt; is a pretty important part of Go: It’s your window to calling anything that isn’t Go (or, more precisely, anything that has C bindings).&lt;/p&gt;

&lt;p&gt;For &lt;a href=&quot;https://github.com/cockroachdb/cockroach&quot;&gt;CockroachDB&lt;/a&gt;, cgo lets us delegate a lot of the heavy lifting at the storage layer to &lt;a href=&quot;http://rocksdb.org/&quot;&gt;RocksDB&lt;/a&gt;, for which no suitable replacement within the Go ecosystem exists, at least to the best of our knowledge. After some iterations, we’ve found that the right way to deal with these external libraries – of which we have quite a few – is to outsource them in Go wrapper packages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cockroachdb/c-rocksdb&quot;&gt;c-rocksdb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cockroachdb/c-snappy&quot;&gt;c-snappy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cockroachdb/c-protobuf&quot;&gt;c-protobuf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cockroachdb/c-jemalloc&quot;&gt;c-jemalloc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cockroachdb/c-lz4&quot;&gt;c-lz4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But as well as using cgo has worked for us, it hasn’t come for free.&lt;/p&gt;

&lt;p&gt;The experienced cgo-er will probably know this (and might prefer to lightly skim over the remainder of this post absentmindedly), but using cgo comes with some caveats that we’ll discuss below along with our suggested workarounds.&lt;/p&gt;

&lt;h2 id=&quot;call-overhead&quot;&gt;Call Overhead&lt;/h2&gt;

&lt;p&gt;The overhead of a cgo call will be orders of magnitude larger than that of a call within Go. That sounds horrible, but isn’t actually an issue in many applications. Let’s take a look via this toy &lt;a href=&quot;https://github.com/tschottdorf/goplay/tree/master/cgobench&quot;&gt;cgobench&lt;/a&gt; package:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BenchmarkCGO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CallCgo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// call `C.(void f() {})` b.N times&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// BenchmarkGo must be called with `-gcflags -l` to avoid inlining.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BenchmarkGo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CallGo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// call `func() {}` b.N times&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ go test -bench . -gcflags '-l'    # disable inlining for fairness
BenchmarkCGO-8  10000000              171 ns/op
BenchmarkGo-8   2000000000           1.83 ns/op
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In other words, in this (admittedly minimal) example there’s approximately a factor of 100 involved. Let’s not be crazy though. In absolute time, 171ns is often a perfectly acceptable price to pay, especially if your C code does substantial work. In our case, however, we clocked in the high tens of thousands of cgo calls during some tests, so we looked at pushing some of the code down to C to cut down on the number of iterations.&lt;/p&gt;

&lt;p&gt;Our conclusion was that the call overhead did not matter – equivalent C++ and Go implementations were indistinguishable performance-wise. However, we still ended up moving some operations to C++ with a &lt;a href=&quot;https://github.com/cockroachdb/cockroach/pull/3155&quot;&gt;fat improvement&lt;/a&gt; due to being able to write a more efficient implementation.&lt;/p&gt;

&lt;h2 id=&quot;manual-ish-memory-management&quot;&gt;Manual-ish Memory Management&lt;/h2&gt;

&lt;p&gt;Go is a garbage-collected runtime, but C is not. That means that passing data from C into Go and vice versa must not be done carelessly, and that copies are often not avoidable. Especially when dealing with byte strings and interface crossing at high frequency (as we are), the prescribed usage of &lt;a href=&quot;https://golang.org/cmd/cgo/#hdr-Go_references_to_C&quot;&gt;C.CString and C.GoBytes&lt;/a&gt; can increase memory pressure considerably – and of course copying data eats up CPU noticeably.&lt;/p&gt;

&lt;p&gt;In some cases, we were able to  avoid some of these copies. For example, when iterating over keys, we use &lt;a href=&quot;https://github.com/cockroachdb/cockroach/blob/b1bbc5c8f980c823e9ff1cd07032ce8ace35f669/storage/engine/rocksdb.go#L563&quot;&gt;something like&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rocksDBIterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GoBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unsafe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rocksDBIterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// The memory referenced by r.key stays valid until the next operation&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// on the iterator.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DBNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// cgo call&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If all we want to do is check the current key against  a criterion, we know the underlying memory isn’t going to be freed while we need it. Hence, this (made-up) bit of code seems wasteful:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HasPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// copy!&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To mitigate all of these copies, we add (and use) a zero-copy (and unsafe) version of Key():&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// unsafeKey() returns the current key referenced by the iterator. The memory&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// is invalid after the next operation on the iterator.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rocksDBIterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unsafeKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Go limits arrays to a length that will fit in a (signed) 32-bit&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// integer. Fall back to copying if our slice is larger.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxLen&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0x7fffffff&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxLen&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GoBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unsafe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unsafe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While this is going to be more efficient and is safe when properly used, it looks and is much more involved. We’re creating a slice which is backed by memory allocated by C. We need to be careful that the C memory is not freed while our slice (or any derivative slices) are still in use. We can get away with it since it’s in our low-level code, but this is certainly not an option for any type of public-facing API; it would be guaranteed that some users would not honor the subtle contract tacked on to the returned byte slice and experience null pointer exceptions randomly.&lt;/p&gt;

&lt;h2 id=&quot;cgoroutines--goroutines&quot;&gt;Cgoroutines != Goroutines&lt;/h2&gt;

&lt;p&gt;This one can be a serious issue and while it’s obvious when you think about it, it can come as a surprise when you don’t. Consider the following:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This boring program wouldn’t do much. 1000 goroutines come pretty much for free in Go; the “stack” allocated to each of them is only a few kilobytes.&lt;/p&gt;

&lt;p&gt;What if we brought cgo into the game? The code below is a simplified version of an &lt;a href=&quot;https://github.com/tschottdorf/goplay/blob/master/cgobench/cgobench_test.go&quot;&gt;example in cgobench&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;//#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;/* seconds */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The “surprise” is that this behaves very differently. A blocking cgo call occupies a system thread; the Go runtime can’t schedule them like it can a goroutine, and the stack, being a real stack, is on the order of megabytes!&lt;/p&gt;

&lt;p&gt;Again, not a big deal if you’re calling into cgo with appropriately bounded concurrency. But if you’re writing Go, chances are you’re used to not thinking about Goroutines too much. A blocking cgo call in the critical request path could leave you with hundreds and hundreds of threads which might well &lt;a href=&quot;https://groups.google.com/forum/#!topic/golang-nuts/8gszDBRZh_4&quot;&gt;lead to issues&lt;/a&gt;. In particular, &lt;code class=&quot;highlighter-rouge&quot;&gt;ulimit -r&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;debug.SetMaxThreads&lt;/code&gt; can lead to a quick demise.&lt;/p&gt;

&lt;p&gt;Or, in the words of &lt;a href=&quot;http://dave.cheney.net/&quot;&gt;Dave Cheney&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Excessive cgo usage breaks Go’s promise of lightweight concurrency.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;cross-out-cross-compilation&quot;&gt;Cross Out Cross-Compilation&lt;/h2&gt;

&lt;p&gt;With cgo, you lose (or rather, you don’t win) the ease with which cross-compilation works in Go 1.5 and higher. This can’t be surprising (since cross-compiling Go with a C dependency certainly must entail cross-compiling the C dependency) but can be a criterion if you have the luxury of choosing between a Go-native package or an external library.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dave.cheney.net/2015/03/03/cross-compilation-just-got-a-whole-lot-better-in-go-1-5&quot;&gt;Dave Cheney’s posts&lt;/a&gt; on this are usually about the best source of information available.&lt;/p&gt;

&lt;h2 id=&quot;static-builds&quot;&gt;Static Builds&lt;/h2&gt;

&lt;p&gt;This is a similar story to cross-compilation, though the situation is a little better. Building static binaries is still possible using cgo, but needs some tweaking. Prior to Go 1.5, the most prominent example of this was having to use the netgo build tag to avoid linking in glibc for DNS resolution. This has since become the default, but there are still subtleties such as having to specify a custom -installsuffix (to avoid using cached builds from a non- static build), passing the right flags to the external linker (in our case, -extldflags “-static”), and building with -a to enforce a complete rebuild.&lt;/p&gt;

&lt;p&gt;Not all of this may be necessary any more, but you get the idea: It gets more manual and, with all the rebuilding, slower. For anyone interested, &lt;a href=&quot;https://tschottdorf.github.io/linking-golang-go-statically-cgo-testing&quot;&gt;here’s my first (and since dated) wrestle with cgo&lt;/a&gt; and a &lt;a href=&quot;https://github.com/golang/go/issues/13470&quot;&gt;mysterious bug&lt;/a&gt; which was picked up &lt;a href=&quot;https://tschottdorf.github.io/golang-static-linking-bug&quot;&gt;in another post&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;debugging&quot;&gt;Debugging&lt;/h2&gt;

&lt;p&gt;Debugging your code will be harder. The portions residing in C aren’t as readily accessed through Go’s tooling. PProf, runtime statistics, line numbers, stack traces – all will sort of feather out as you cross the boundary. GoRename and its friends may &lt;a href=&quot;https://github.com/golang/tools/blob/5b9ecb9f68e2e1be33b663895c700aac9726378e/refactor/rename/rename.go#L425&quot;&gt;occasionally litter&lt;/a&gt; your source code with identifiers that postdate the translation to cgo-generated code. The loss can feel jarring since the tooling usually works so well. But, of course, gdb still works.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;All in all, cgo is a great tool with limitations. We’ve recently begun moving some of the low-level operations down to C++, which gave some &lt;a href=&quot;https://github.com/cockroachdb/cockroach/pull/3155&quot;&gt;impressive speed-ups&lt;/a&gt;. Other attempts produced no benefit. Isn’t performance work fun?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CockroachDB Tech Talk at Clarifai</title>
   <link href="http://tbg.github.io//cockroachdb-tech-talk-clarifai"/>
   <updated>2016-06-03T00:00:00+00:00</updated>
   <id>http://tbg.github.io//tech-talk-clarifai</id>
   <content type="html">&lt;p&gt;I gave a &lt;a href=&quot;https://github.com/cockroachdb/cockroach&quot;&gt;Cockroach&lt;/a&gt; tech talk at
&lt;a href=&quot;https://clarifai.com&quot;&gt;Clarifai&lt;/a&gt; a few days ago, providing an overview of the
various components of the system and, at least I hope, filling in enough detail
to get a good intuitive understanding of how everything fits together - from a
client’s SQL request to the actual replication and on-disk storage.&lt;/p&gt;

&lt;p&gt;Watch the talk (with a lot of Q&amp;amp;A) below:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/pIqVpQ7Nkvs&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;

</content>
 </entry>
 
 <entry>
   <title>Static Cgo Builds, What Could Go Wrong?</title>
   <link href="http://tbg.github.io//golang-static-linking-bug"/>
   <updated>2016-01-01T00:00:00+00:00</updated>
   <id>http://tbg.github.io//static-libc-go-bug</id>
   <content type="html">&lt;p&gt;&lt;em&gt;The first computer bugs were found by &lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/8/8a/H96566k.jpg&quot;&gt;cleaning out mechanical
parts&lt;/a&gt;. The
bug described below unfortunately couldn’t be tracked down in such a
straightforward fashion. But the discovery story is more interesting than “I
looked into hundreds of relays” and goes way down the rabbit hole as we revisit
a dozen hours’ worth of debugging at &lt;a href=&quot;http://cockroachlabs.com&quot;&gt;Cockroach Labs&lt;/a&gt;.
We’ll re-emerge with a lesson about static linking and cgo.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A couple of weeks ago, my colleague &lt;a href=&quot;https://github.com/tamird&quot;&gt;@tamird&lt;/a&gt; opened
issue &lt;a href=&quot;https://github.com/golang/go/issues/13470&quot;&gt;#13470&lt;/a&gt; against
&lt;a href=&quot;https://github.com/golang/go&quot;&gt;golang/go&lt;/a&gt;. In it, he gives the following
snippet (if you want to follow along, I’ve prepared a &lt;a href=&quot;#fn_1&quot;&gt;Docker image&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;net&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;os/user&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// enable cgo for static build&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tcp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localhost:1337&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Looks about as innocuous as it is nonsensical, right? If we run it naively,
nothing happens:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go run main.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But of course the &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; import above hints at trying a static build instead.
Let’s do that:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ go run -ldflags '-extldflags &quot;-static&quot;' main.go
fatal error: unexpected signal during runtime execution
[signal 0xb code=0x1 addr=0xe5 pc=0x7fec267f8a5c]

goroutine 1 [syscall, locked to thread]:
runtime.cgocall(0x402620, 0xc82004bd30, 0xc800000000)
    /usr/local/go/src/runtime/cgocall.go:120 +0x11b fp=0xc82004bce0 sp=0xc82004bcb0
os/user.lookupUnix(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
    /usr/local/go/src/os/user/lookup_unix.go:99 +0x723 fp=0xc82004bea0 sp=0xc82004bd30
os/user.Current(0x62eba8, 0x0, 0x0)
    /usr/local/go/src/os/user/lookup.go:9 +0x24 fp=0xc82004bf00 sp=0xc82004bee0
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Jeez, what just happened here?&lt;/p&gt;

&lt;p&gt;This is obviously a panic. But it’s not a panic from Go-land, it’s a segfault
(&lt;code class=&quot;highlighter-rouge&quot;&gt;signal 0xb&lt;/code&gt; is signal &lt;code class=&quot;highlighter-rouge&quot;&gt;11=SIGSEGV&lt;/code&gt;) from within a &lt;a href=&quot;https://github.com/golang/go/blob/cb867d2fd64adc851f82be3c6eb6e38ec008930b/src/os/user/lookup_unix.go#L77&quot;&gt;cgo call&lt;/a&gt;
to &lt;code class=&quot;highlighter-rouge&quot;&gt;getpwuid_r&lt;/code&gt;, which belongs to &lt;code class=&quot;highlighter-rouge&quot;&gt;glibc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Versed users of cgo and static builds will know that if you call out to &lt;code class=&quot;highlighter-rouge&quot;&gt;glibc&lt;/code&gt;
in your code (be it directly or through dependencies), your “static” binary
will still need the exact version of &lt;code class=&quot;highlighter-rouge&quot;&gt;glibc&lt;/code&gt; available at runtime to work
correctly. In fact, if you add &lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;-ldflags&lt;/code&gt; parameter, we get
warnings:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[...]
/tmp/.../000002.o: In function `mygetpwuid_r':
/tmp/.../os/user/lookup_unix.go:28: warning: Using 'getpwuid_r' in statically
  linked applications requires at runtime the shared libraries from the glibc
  version used for linking
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But we used &lt;code class=&quot;highlighter-rouge&quot;&gt;go run&lt;/code&gt; directly and didn’t move the binary around or change our
glibc. So this &lt;strong&gt;should&lt;/strong&gt; work!&lt;/p&gt;

&lt;p&gt;In the test case, it’s the call to &lt;code class=&quot;highlighter-rouge&quot;&gt;user.Current()&lt;/code&gt; which crashes the program.
But what’s the role of the call &lt;code class=&quot;highlighter-rouge&quot;&gt;net.Dial()&lt;/code&gt; before that? Well, the big
surprise is that without that call, the program does not crash. Same for the
loop. Remove it and voila, no error. So this isn’t a simple case of a call
failing, it’s a weird concoction of ingredients producing this error.&lt;/p&gt;

&lt;p&gt;Still interested? It’s going to get technical. You can go &lt;a href=&quot;#conclusion&quot;&gt;straight to the
conclusion&lt;/a&gt;, but if you stick along I’ll walk you all the way through,
from the first high level failure over hours of debugging to, fortunately, an
ending.&lt;/p&gt;

&lt;p&gt;&lt;i id=&quot;fn_1&quot;&gt;[1]&lt;/i&gt;: &lt;a href=&quot;https://github.com/tschottdorf/goplay/blob/master/issue_13470/Dockerfile&quot;&gt;Dockerfile here&lt;/a&gt;; invoke via &lt;code class=&quot;highlighter-rouge&quot;&gt;build -t gdb . &amp;amp;&amp;amp; docker run -ti gdb&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;discovery&quot;&gt;Discovery&lt;/h2&gt;

&lt;p&gt;This bug hit us out of the blue in
&lt;a href=&quot;https://github.com/cockroachdb/cockroach/pull/3310&quot;&gt;cockroachdb/cockroach#3310&lt;/a&gt;.
Basically, &lt;a href=&quot;https://github.com/tamird&quot;&gt;@tamird&lt;/a&gt; was building a static test
binary with the goal of running it during nightly builds. The test uses
&lt;a href=&quot;https://github.com/lib/pq&quot;&gt;lib/pq&lt;/a&gt; to connect to a &lt;a href=&quot;http://github.com/cockroachdb/cockroach&quot;&gt;Cockroach DB
cluster&lt;/a&gt; (which essentially speaks
Postgres’ wire protocol). You already know what happened when he tried to run it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fatal error: unexpected signal during runtime execution
[signal 0xb code=0x1 addr=0xe5 pc=0x7f3c781f3a5c]

goroutine 3890 [syscall, locked to thread]:
runtime.cgocall(0x44c7f0, 0xc82036a8d8, 0xc800000000)
    /usr/local/go/src/runtime/cgocall.go:120 +0x11b fp=0xc82036a888 sp=0xc82036a858
os/user._Cfunc_mygetpwuid_r(0x0, 0xc8203a8390, 0x7f3c5c000a10, 0x400, 0xc8200e4058, 0x7f3c00000000)
    ??:0 +0x39 fp=0xc82036a8d8 sp=0xc82036a888
[...]
os/user.Current(0x13ce800, 0x0, 0x0)
    /usr/local/go/src/os/user/lookup.go:9 +0x24 fp=0xc82036aaa8 sp=0xc82036aa88
github.com/lib/pq.(*conn).setupSSLClientCertificates(0xc8201c9180, 0xc8202b2f00, 0xc82036b3d8)
    /go/src/github.com/lib/pq/conn.go:983 +0x478 fp=0xc82036ad40 sp=0xc82036aaa8
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I had &lt;a href=&quot;http://tschottdorf.github.io/linking-golang-go-statically-cgo-testing/&quot;&gt;dabbled/fought with static cgo builds
before&lt;/a&gt;
and had never seen it crash like that (even when trying), so I was intrigued
and we went down the rabbit hole together.&lt;/p&gt;

&lt;h2 id=&quot;first-steps&quot;&gt;First Steps&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/lib/pq/blob/11fc39a580a008f1f39bb3d11d984fb34ed778d9/conn.go#L983&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lib/pq/conn.go:984&lt;/code&gt;&lt;/a&gt;
is where the fatal call to &lt;code class=&quot;highlighter-rouge&quot;&gt;user.Current()&lt;/code&gt; takes place. Leaving out a lot of
code, this is roughly what the callpath to it looks like:&lt;/p&gt;

&lt;p&gt;&lt;i id=&quot;dialopen&quot;&gt; &lt;/i&gt;&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DialOpen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dialer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userCurrent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// !!!&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// later...&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// never comes back from this call, see below&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// boom (this is conn.go:983)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s relatively easy to guess this in this heavily truncated version, but
there’s actually a successful call to &lt;code class=&quot;highlighter-rouge&quot;&gt;user.Current()&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;userCurrent()&lt;/code&gt;
(marked with &lt;code class=&quot;highlighter-rouge&quot;&gt;!!!&lt;/code&gt;). We only saw this after adding an &lt;code class=&quot;highlighter-rouge&quot;&gt;fmt.Println()&lt;/code&gt; in
&lt;code class=&quot;highlighter-rouge&quot;&gt;user.Current()&lt;/code&gt; and wondered why that printed more than we expected. So,
that’s weird - the crash is either random or it depends on
something else happening before it.&lt;/p&gt;

&lt;h2 id=&quot;reduction&quot;&gt;Reduction&lt;/h2&gt;

&lt;p&gt;The first step in such a scenario is always reduction: someone else will likely
have to help you, and they shouldn’t have to wade through boatloads of
unrelated code.&lt;/p&gt;

&lt;p&gt;Unfortunately, straightforward attempts to reproduce the crash proved
difficult. A bunch of calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;user.Current()&lt;/code&gt; in a static binary? Works.
Rewriting it as a test? Works. Maybe the calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;user.Current()&lt;/code&gt; need to be
in a proxy (or double-proxy) package? Works.&lt;/p&gt;

&lt;p&gt;We couldn’t figure it out but at least managed to strip a lot of code by
experimentation. What we ended up with was a test that did nothing but open a
&lt;code class=&quot;highlighter-rouge&quot;&gt;lib/pq&lt;/code&gt; connection, triggering the same panic. Better than nothing.&lt;/p&gt;

&lt;p&gt;Now we were in the position to quickly iterate and try to close the
gap between the two invocations of &lt;code class=&quot;highlighter-rouge&quot;&gt;user.Current()&lt;/code&gt;. Remember, the bug is&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;call &lt;code class=&quot;highlighter-rouge&quot;&gt;user.Current()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;something else happens&lt;/li&gt;
  &lt;li&gt;explode at &lt;code class=&quot;highlighter-rouge&quot;&gt;user.Current()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It is fairly easy to see in the &lt;a href=&quot;#dialopen&quot;&gt;distilled version above&lt;/a&gt; that there
is exactly one relevant call between the two invocations&lt;sup&gt;&lt;a href=&quot;#fn_2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now it’s time for a binary search - hop down into &lt;code class=&quot;highlighter-rouge&quot;&gt;dial&lt;/code&gt;, insert calls to
&lt;code class=&quot;highlighter-rouge&quot;&gt;user.Current()&lt;/code&gt; in a bunch of locations, run the binary, find the location
which crashed and iterate. The hypothesis at this point is that somehow, a
previous syscall corrupts &lt;em&gt;something&lt;/em&gt; for the syscall in &lt;code class=&quot;highlighter-rouge&quot;&gt;user.Current()&lt;/code&gt;, and
that we want to figure out the specific syscall that does it.&lt;/p&gt;

&lt;p&gt;Sounds tedious? Well, it was. The callpath we eventually figured out is (using
&lt;code class=&quot;highlighter-rouge&quot;&gt;user.Current()&lt;/code&gt; hits import path conflict bedrock at some point):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/local/go/src/net/fd_unix.go:118 (0xbdedd9)
        (*netFD).connect: debug.PrintStack() // inserted for testing
/usr/local/go/src/net/sock_posix.go:137
        (*netFD).dial: if err := fd.connect(lsa, rsa, deadline); err != nil {
# 9 stack frames omitted...
/go/src/github.com/lib/pq/conn.go:88
        defaultDialer.Dial: return net.Dial(ntw, addr)
/go/src/github.com/lib/pq/conn.go:279
        dial: return d.Dial(ntw, addr)
/go/src/github.com/lib/pq/conn.go:238
        DialOpen: cn.c, err = dial(d, o)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and we now have the following example, which requires a patch to the standard
library but is good enough for someone else to investigate:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// boom_test.go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cgo_static_boom&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;net&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;os/user&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testing&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestBoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tcp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localhost:5423&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fatalf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;conn: %s, err: %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// cgo.go - without this, we don't get a static binary.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Presumably we could run with CGO_ENABLED=1 instead.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cgo_static_boom&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and the following patch to &lt;code class=&quot;highlighter-rouge&quot;&gt;$(go env GOROOT)/src/net/fd_unix.go&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gu&quot;&gt;@@ -114,6 +116,8 @@ func (fd *netFD) connect(la, ra syscall.Sockaddr, deadline time.Time) error {
&lt;/span&gt;         if err := fd.pd.WaitWrite(); err != nil {
             return err
         }
&lt;span class=&quot;gi&quot;&gt;+        user.Current()
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I was happy with this and stepped out for dinner, but
&lt;a href=&quot;https://github.com/tamird&quot;&gt;@tamird&lt;/a&gt; kept drilling to get rid of the stdlib
patch. He threw together &lt;code class=&quot;highlighter-rouge&quot;&gt;net.Dial()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;user.Current()&lt;/code&gt; in the loop (to
account for randomness), figured out that the test setup wasn’t needed and
must’ve been delighted to arrive at the example at the beginning of this post.&lt;/p&gt;

&lt;p&gt;&lt;i id=&quot;fn_2&quot;&gt;[2]&lt;/i&gt;: of course, all the irrelevant calls are omitted here -
we’re already hours into the game at this point.&lt;/p&gt;

&lt;h2 id=&quot;disassembling-the-troops&quot;&gt;(Dis)Assembling the troops&lt;/h2&gt;

&lt;p&gt;Fast-forward four days, two dozen comments and one closed issue
&lt;a href=&quot;https://github.com/golang/go/issues/13470&quot;&gt;golang/go#13470&lt;/a&gt; later, we’re a
little wiser. After some back and forth on
&lt;a href=&quot;https://github.com/golang/go/issues/13470&quot;&gt;#13470&lt;/a&gt; about glibc versions and
&lt;code class=&quot;highlighter-rouge&quot;&gt;LD_PRELOAD&lt;/code&gt;, &lt;a href=&quot;https://github.com/mwhudson&quot;&gt;@mwhudson&lt;/a&gt; posted some interesting
findings. To trace what he did, we’re going to leave Go-land completely - we’re
seeing a segfault from a library call, so that’s where our debugging has to
take place. Time to dust off &lt;code class=&quot;highlighter-rouge&quot;&gt;gdb&lt;/code&gt;&lt;sup&gt;&lt;a href=&quot;#fn_3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gdb ./boom
(gdb) run
Starting program: /go/src/github.com/tschottdorf/goplay/issue_13470/boom
[Thread debugging using libthread_db enabled]
Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.
[New Thread 0x7ffff7e4a700 (LWP 17)]
[New Thread 0x7ffff7609700 (LWP 18)]
[New Thread 0x7ffff6e08700 (LWP 19)]
[New Thread 0x7ffff6607700 (LWP 20)]

Program received signal SIGSEGV, Segmentation fault.
[Switching to Thread 0x7ffff6607700 (LWP 20)]
0x00007ffff5bbca5c in internal_getpwuid_r (ent=&amp;lt;optimized out&amp;gt;, errnop=&amp;lt;optimized out&amp;gt;,
    buflen=&amp;lt;optimized out&amp;gt;, buffer=&amp;lt;optimized out&amp;gt;, result=&amp;lt;optimized out&amp;gt;, uid=&amp;lt;optimized out&amp;gt;)
    at nss_compat/compat-pwd.c:961
warning: Source file is more recent than executable.
961		  while (isspace (*p))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This gives us a location in the code (&lt;code class=&quot;highlighter-rouge&quot;&gt;nss_compat/compat-pwd.c:961&lt;/code&gt;) but it’s
easy to see that it doesn’t really matter. &lt;code class=&quot;highlighter-rouge&quot;&gt;*p&lt;/code&gt; is not the culprit (if it were,
we’d see &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0&lt;/code&gt; and not &lt;code class=&quot;highlighter-rouge&quot;&gt;0x5e&lt;/code&gt; as the illegal memory access) and in fact looking
at the assembly code we see&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) disas
Dump of assembler code for function _nss_compat_getpwuid_r:
[...]
   0x00007ffff5bbca44 &amp;lt;+308&amp;gt;:	callq  0x7ffff5bba3a0 &amp;lt;__ctype_b_loc@plt&amp;gt;
   0x00007ffff5bbca49 &amp;lt;+313&amp;gt;:	mov    (%rax),%rcx
   0x00007ffff5bbca4c &amp;lt;+316&amp;gt;:	jmp    0x7ffff5bbca54 &amp;lt;_nss_compat_getpwuid_r+324&amp;gt;
   0x00007ffff5bbca4e &amp;lt;+318&amp;gt;:	xchg   %ax,%ax
   0x00007ffff5bbca50 &amp;lt;+320&amp;gt;:	add    $0x1,%r15
   0x00007ffff5bbca54 &amp;lt;+324&amp;gt;:	movzbl (%r15),%eax
   0x00007ffff5bbca58 &amp;lt;+328&amp;gt;:	movsbq %al,%rdx
=&amp;gt; 0x00007ffff5bbca5c &amp;lt;+332&amp;gt;:	testb  $0x20,0x1(%rcx,%rdx,2)
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since we’re looking at the expansion of &lt;code class=&quot;highlighter-rouge&quot;&gt;isspace()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;testb&lt;/code&gt; is bitwise
comparison, &lt;code class=&quot;highlighter-rouge&quot;&gt;$0x20&lt;/code&gt; strikes us as familiar (it’s a space); &lt;code class=&quot;highlighter-rouge&quot;&gt;%rcx&lt;/code&gt; is populated
from &lt;code class=&quot;highlighter-rouge&quot;&gt;__ctype_b_loc@plt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;%rdx&lt;/code&gt; is used as a type of offset. Remember that
trying to read &lt;code class=&quot;highlighter-rouge&quot;&gt;0x5e&lt;/code&gt; was causing the segfault? We have&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) info registers rcx rdx
rcx            0x0	0
rdx            0x72	114
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1(%rcx,%rdx,2) = 0x1 + %rcx + 2*%rdx = 0x1 + 2*0x72 = 0x5e&lt;/code&gt;. Clearly
we’re looking at the right code here, and it’s odd that &lt;code class=&quot;highlighter-rouge&quot;&gt;%rcx&lt;/code&gt; would be zero
since &lt;code class=&quot;highlighter-rouge&quot;&gt;__ctype_b_loc&lt;/code&gt; &lt;a href=&quot;https://refspecs.linuxfoundation.org/LSB_3.0.0/LSB-PDA/LSB-PDA/baselib---ctype-b-loc.html&quot;&gt;should&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[…] return a pointer into an array of characters in the current locale that
contains characteristics for each character in the current character set.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s clearly not what it did here. Let’s look at its code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ objdump -D ./boom | grep -A 10 __ctype_b_loc
000000000051de70 &amp;lt;__ctype_b_loc&amp;gt;:
  51de70:	48 c7 c0 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rax
  51de77:	64 48 03 04 25 00 00 	add    %fs:0x0,%rax
  51de7e:	00 00
  51de80:	c3                   	retq
  [...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whatever happens here, the &lt;code class=&quot;highlighter-rouge&quot;&gt;%fs&lt;/code&gt; register is involved, and it &lt;a href=&quot;http://stackoverflow.com/questions/6611346/how-are-the-fs-gs-registers-used-in-linux-amd64&quot;&gt;appears that this
register plays a role in thread-local storage&lt;/a&gt;.
Knowing that, we set a breakpoint just before the crash and investigate the
registers, while also keeping an eye on thread context switches:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) br nss_compat/compat-pwd.c:961
(gdb) run
[...]
Breakpoint 1, internal_getpwuid_r (ent=&amp;lt;optimized out&amp;gt;, errnop=&amp;lt;optimized out&amp;gt;,
    buflen=&amp;lt;optimized out&amp;gt;, buffer=&amp;lt;optimized out&amp;gt;, result=&amp;lt;optimized out&amp;gt;, uid=&amp;lt;optimized out&amp;gt;)
    at nss_compat/compat-pwd.c:961
961		  while (isspace (*p))
(gdb) disas
[...]
=&amp;gt; 0x00007ffff5bbca54 &amp;lt;+324&amp;gt;:	movzbl (%r15),%eax
   0x00007ffff5bbca58 &amp;lt;+328&amp;gt;:	movsbq %al,%rdx
   0x00007ffff5bbca5c &amp;lt;+332&amp;gt;:	testb  $0x20,0x1(%rcx,%rdx,2)
[...]
(gdb) si 2 # step to &amp;lt;+332&amp;gt;
0x00007ffff5bbca5c	961		  while (isspace (*p))
(gdb) info register fs rcx rdx
fs             0x63	99
rcx            0x7ffff57449c0	140737311427008
rdx            0x72	114
(gdb) c
Continuing.
[Switching to Thread 0x7ffff7609700 (LWP 136)]

Breakpoint 1, internal_getpwuid_r (ent=&amp;lt;optimized out&amp;gt;, errnop=&amp;lt;optimized out&amp;gt;,
    buflen=&amp;lt;optimized out&amp;gt;, buffer=&amp;lt;optimized out&amp;gt;, result=&amp;lt;optimized out&amp;gt;, uid=&amp;lt;optimized out&amp;gt;)
    at nss_compat/compat-pwd.c:961
961		  while (isspace (*p))
(gdb) si 2
0x00007ffff5bbca5c	961		  while (isspace (*p))
(gdb) info register fs rcx rdx
fs             0x0	0
rcx            0x0	0
rdx            0x72	114
(gdb) si

Program received signal SIGSEGV, Segmentation fault.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Aha! When &lt;code class=&quot;highlighter-rouge&quot;&gt;%fs = 99&lt;/code&gt;, apparently all is well, but in an iteration which has
&lt;code class=&quot;highlighter-rouge&quot;&gt;%fs = 0&lt;/code&gt;, all hell breaks loose. Note also that there’s a context switch
right before the crash (&lt;code class=&quot;highlighter-rouge&quot;&gt;[Switching to Thread 0x7ffff7609700 (LWP 136)]&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;i id=&quot;fn_3&quot;&gt;[3]&lt;/i&gt;: If you’re still following along, you’ll &lt;em&gt;really&lt;/em&gt; want to
use the &lt;a href=&quot;#fn_1&quot;&gt;Docker image&lt;/a&gt; to avoid a lengthy setup.&lt;/p&gt;

&lt;h2 id=&quot;resolution&quot;&gt;Resolution&lt;/h2&gt;

&lt;p&gt;This seems to have less and less to do with Go. And indeed, it’s only a short
time after that &lt;a href=&quot;https://github.com/ianlancetaylor&quot;&gt;ianlancetaylor&lt;/a&gt; comes up
with a &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; example which exhibits the same problem. This seems like good news,
but filing the &lt;a href=&quot;https://sourceware.org/bugzilla/show_bug.cgi?id=19341&quot;&gt;upstream issue against glibc&lt;/a&gt;,
it becomes apparent that &lt;code class=&quot;highlighter-rouge&quot;&gt;glibc&lt;/code&gt; supports “some static linking” but not all -
in particular, threading is fairly broken and this has been known for a while
and would be quite nontrivial to fix. Roughly what happens is the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Thread 1 calls out to the external shared library &lt;code class=&quot;highlighter-rouge&quot;&gt;libnss_compat&lt;/code&gt; (via
&lt;code class=&quot;highlighter-rouge&quot;&gt;user.Current()&lt;/code&gt;). &lt;code class=&quot;highlighter-rouge&quot;&gt;libnss&lt;/code&gt; wants to use thread-local storage (TLS), but it
can’t use the calling thread’s TLS because we’re statically linked (so there
is no dynamic symbol table).
Instead, it uses its own set of TLS variables. But these are initialized at
the time at which &lt;code class=&quot;highlighter-rouge&quot;&gt;libnss&lt;/code&gt; is &lt;strong&gt;loaded&lt;/strong&gt; (which is right now), and only on
that thread.&lt;/li&gt;
  &lt;li&gt;Thread 2 calls into &lt;code class=&quot;highlighter-rouge&quot;&gt;libnss_compat&lt;/code&gt; as well, but the initialization happened
only on the first thread. &lt;code class=&quot;highlighter-rouge&quot;&gt;__ctype_b_loc&lt;/code&gt; relies on this initialization, so
it returns garbage. Boom.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Summing up a comment by &lt;a href=&quot;https://sourceware.org/bugzilla/show_bug.cgi?id=19341#c1&quot;&gt;Carlos O’Donell&lt;/a&gt;,
the bug is likely to live forever and hard to fix; while you &lt;em&gt;can&lt;/em&gt; link
statically against glibc, it’s really nothing you should ever find yourself
doing. At least not if you’re using threads.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Linking statically against &lt;code class=&quot;highlighter-rouge&quot;&gt;glibc&lt;/code&gt; has proven to be an insane idea, but it’s
surprising that this was apparently news for everyone up to (but not including)
the glibc bug tracker.&lt;/p&gt;

&lt;p&gt;We figured out that we can &lt;a href=&quot;https://github.com/cockroachdb/cockroach/pull/3343&quot;&gt;get a less obviously ludicrous static build&lt;/a&gt;
by substituting &lt;code class=&quot;highlighter-rouge&quot;&gt;glibc&lt;/code&gt; for &lt;a href=&quot;http://www.musl-libc.org&quot;&gt;musl-libc&lt;/a&gt;, but that
needs careful benchmarking and testing (in particular, we instantly had issues
with the &lt;a href=&quot;https://github.com/cockroachdb/cockroach/pull/3413&quot;&gt;DNS resolver&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;At the end of the day, we decided that there were only diminishing returns to
be had by linking a completely static binary. What really matters to us is not
having non-standard dependencies - having &lt;code class=&quot;highlighter-rouge&quot;&gt;glibc&lt;/code&gt; available is a bit of a drag
when deploying on minimal systems (think containers) but is otherwise
standard. So, at least for the time being, we’ll distributed an image that
&lt;a href=&quot;https://github.com/cockroachdb/cockroach/pull/3412&quot;&gt;only links against glibc dynamically&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a recent post about the &lt;a href=&quot;http://www.cockroachlabs.com/blog/the-cost-and-complexity-of-cgo/&quot;&gt;cost and complexity of cgo&lt;/a&gt;
we warned that cgo comes with a more intricate build process and the occasional
need to take debugging beyond the realms Go. This bug sure goes out of its way
to prove these points.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Rust and automatically generating docs on CircleCI</title>
   <link href="http://tbg.github.io//rust-docs-circle-ci"/>
   <updated>2015-08-22T00:00:00+00:00</updated>
   <id>http://tbg.github.io//rust-docs-circle-ci</id>
   <content type="html">&lt;p&gt;After some (private) dabbling around with &lt;a href=&quot;http://rust-lang.org&quot;&gt;Rust&lt;/a&gt;, I now
have the first public toy project: &lt;a href=&quot;https://crates.io/crates/hlc&quot;&gt;hlc-rs&lt;/a&gt;, a
&lt;a href=&quot;http://muratbuffalo.blogspot.com/2014/07/hybrid-logical-clocks.html&quot;&gt;hybrid logical clock&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’m going to omit the customary ode of joy to the Rust language, tooling, and &lt;a href=&quot;https://github.com/nrc/rustfmt/issues/197&quot;&gt;the community&lt;/a&gt; and only share a small snippet
that I hacked together to automatically publish the &lt;a href=&quot;https://doc.rust-lang.org/book/documentation.html&quot;&gt;auto-generated documentation&lt;/a&gt; via &lt;a href=&quot;https://pages.github.com&quot;&gt;github pages&lt;/a&gt;
after a successful &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; test run on &lt;a href=&quot;https://circleci.com&quot;&gt;CircleCI&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;step-1&quot;&gt;Step 1&lt;/h1&gt;

&lt;p&gt;I’m assuming the repository root is your crate’s root directory. I’m using this
&lt;code class=&quot;highlighter-rouge&quot;&gt;circle.yml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git config --global user.email my@email.com&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git config --global user.name &quot;My Name&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;curl -sf -L https://static.rust-lang.org/rustup.sh | sh /dev/stdin --channel=nightly --yes&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cargo test&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;deployment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;docs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cargo doc &amp;amp;&amp;amp; git fetch origin gh-pages &amp;amp;&amp;amp; git checkout gh-pages &amp;amp;&amp;amp; (git mv doc doc-$(git describe --always master^) || rm -rf doc) &amp;amp;&amp;amp; mv target/doc/ ./doc &amp;amp;&amp;amp; git add -A ./doc* &amp;amp;&amp;amp; git commit -m 'update docs' &amp;amp;&amp;amp; git push origin gh-pages&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pretty standard (also, likely suboptimal - but that’s fine for a project that
doesn’t see a lot of traffic). The notable part is the last one:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Generate the documentation.&lt;/span&gt;
cargo doc &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git fetch origin gh-pages &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# make sure we have the branch&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git checkout gh-pages &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# check it out&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# If there's a `doc` directory, move it away or delete it if that fails.&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;git mv doc doc-&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git describe &lt;span class=&quot;nt&quot;&gt;--always&lt;/span&gt; master^&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; doc&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# Move the new docs in their place.&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mv target/doc/ ./doc &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# Add both the old docs and the new one.&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git add &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; ./doc&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# Commit, duh.&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'update docs'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# Push new commit.&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push origin gh-pages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For setting this up, three simple steps are needed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;add the project to &lt;a href=&quot;http://circleci.com&quot;&gt;CircleCI&lt;/a&gt;,&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://circleci.com/docs/adding-read-write-deployment-key&quot;&gt;add read-write deploy key for GitHub and CircleCI&lt;/a&gt;, and&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;push an initial &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout &lt;span class=&quot;nt&quot;&gt;--orphan&lt;/span&gt;
git reset
git commit &lt;span class=&quot;nt&quot;&gt;--allow-empty&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'initial commit'&lt;/span&gt;
vi circle.yml &lt;span class=&quot;c&quot;&gt;# see below&lt;/span&gt;
git push origin gh-pages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;where &lt;code class=&quot;highlighter-rouge&quot;&gt;circle.yml&lt;/code&gt; is a dummy (so that the branch doesn’t give you test failures):&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo &quot;noop&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, the same easily works on other CI platforms and possibly there are
&lt;a href=&quot;https://www.reddit.com/r/rust/comments/3e1xgy/how_do_you_folks_autogenerate_the_doc_pages_for/&quot;&gt;other ways to do it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That’s it already! Now &lt;a href=&quot;https://tschottdorf.github.io/hlc-rs/doc/hlc/&quot;&gt;documentation like this&lt;/a&gt; should be auto-generated for you with the next CI run on &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Cockroach at the Go London User Group</title>
   <link href="http://tbg.github.io//cockroachdb-talk-go-london-2015"/>
   <updated>2015-07-22T00:00:00+00:00</updated>
   <id>http://tbg.github.io//london-go-user-group</id>
   <content type="html">&lt;p&gt;Here’s the recording of a talk I gave at the 15th &lt;a href=&quot;http://www.meetup.com/Go-London-User-Group/events/223771694/&quot;&gt;London Go User Group&lt;/a&gt; about &lt;a href=&quot;http://github.com/cockroachdb/cockroach&quot;&gt;Cockroach DB&lt;/a&gt;. I’m particularly excited about all the work that’s being done on the SQL layer: In the mere 24 hours that have passed since the presentation, SQL support has already taken a couple of steps forward. It’s satisfying to see it all come together.&lt;/p&gt;

&lt;p&gt;Check our the video below or &lt;a href=&quot;https://docs.google.com/presentation/d/1CHSFBv_8Ra_WGOq-C7H4zeiWKdx_eLKsqrQNRJjaPL0/edit#slide=id.p&quot;&gt;take a look at the slides&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/00css2j0xFo&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Thanks to the &lt;a href=&quot;http://www.meetup.com/Go-London-User-Group/&quot;&gt;London gophers&lt;/a&gt; for having me. It’s only been my second time in London (the first time being a 7th grade weekend trip) and I’ve enjoyed it a lot.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Cockroach at New York Enterprise Technology</title>
   <link href="http://tbg.github.io//cockroachdb-talk-nyetm-2015"/>
   <updated>2015-06-30T00:00:00+00:00</updated>
   <id>http://tbg.github.io//workbench</id>
   <content type="html">&lt;p&gt;I recently presented at the &lt;a href=&quot;http://nyetm.com&quot;&gt;New York Enterprise Technology Meetup&lt;/a&gt; with a simple demo: starting, torturing, killing and recovering a &lt;a href=&quot;http://github.com/cockroachdb/cockroach&quot;&gt;Cockroach&lt;/a&gt; cluster.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/SXAEZlpsHNE&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Thanks to the organizers at &lt;a href=&quot;http://www.work-bench.com/&quot;&gt;Work-Bench NYC&lt;/a&gt; for a &lt;a href=&quot;http://www.work-bench.com/blog/2015/06/17/introducing-the-new-nyetm-home/&quot;&gt;fun event&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Stack vs Heap: Improving memory allocation through benchmarks</title>
   <link href="http://tbg.github.io//go-memory-allocation-stack-heap"/>
   <updated>2015-04-11T00:00:00+00:00</updated>
   <id>http://tbg.github.io//go-memory-allocation-heap-stack</id>
   <content type="html">&lt;p&gt;Recently &lt;a href=&quot;https://github.com/petermattis&quot;&gt;petermattis&lt;/a&gt; from &lt;a href=&quot;http://cockroachlabs.com/&quot;&gt;cockroach labs&lt;/a&gt; &lt;a href=&quot;https://github.com/cockroachdb/cockroach/pull/615#discussion_r28082815&quot;&gt;shared&lt;/a&gt; a simple method for finding weak spots in your &lt;a href=&quot;http://golang.org&quot;&gt;Go&lt;/a&gt; project’s memory management:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I found this using the memory profiler: &lt;code class=&quot;highlighter-rouge&quot;&gt;go test -bench=. -memprofile=prof -memprofilerate=1&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;-memprofilerate=1&lt;/code&gt; setting tells the memory profiler to record every allocation. This slows the benchmark down a lot, but gives a price view of where the allocations are occurring.
I then use &lt;code class=&quot;highlighter-rouge&quot;&gt;go tool pprof --alloc_objects &amp;lt;binary&amp;gt; prof&lt;/code&gt; to view the output.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you’ve found such a spot in which the escape analysis doesn’t want to put things on the stack (for example, because it’s a rather large byte slice), you could use a &lt;code class=&quot;highlighter-rouge&quot;&gt;sync.Pool&lt;/code&gt; to avoid an allocation each time the problematic code gets called, or maybe you have your concurrent access under control - then a scratch buffer is enough.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Cockroach at FOSDEM 2015</title>
   <link href="http://tbg.github.io//cockroachdb-talk-fosdem-2015"/>
   <updated>2015-03-13T00:00:00+00:00</updated>
   <id>http://tbg.github.io//cockroachdb-fosdem</id>
   <content type="html">&lt;p&gt;At this year’s edition of &lt;a href=&quot;http://fosdem.org&quot;&gt;FOSDEM&lt;/a&gt;, I gave a presentation
on &lt;a href=&quot;http://github.com/cockroachdb/cockroach&quot;&gt;Cockroach&lt;/a&gt; in the &lt;a href=&quot;https://fosdem.org/2015/schedule/track/go/&quot;&gt;Go Devroom&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/cockroachdb/cockroach&quot;&gt;Cockroach&lt;/a&gt; aims to provide a
transactional, scalable, and available datastore for everyone - basically
a database that feels as solid as a traditional SQL server, but scales out and
replicates data effortlessly (which, of course, is not true with traditional
RDBMS) while avoiding the pitfalls that traditionally come with
&lt;a href=&quot;http://en.wikipedia.org/wiki/NoSQL&quot;&gt;NoSQL&lt;/a&gt; datastores.&lt;/p&gt;

&lt;p&gt;In the talk, I put a focus on providing technical details about our
implementation of fast, lock-free transactions to give the audience an
intuitive understanding of what’s happening behind the scenes.&lt;/p&gt;

&lt;p&gt;You can find out for yourself how well that worked by giving the video
below a try, and by checking out
&lt;a href=&quot;https://github.com/cockroachdb/cockroach&quot;&gt;Cockroach&lt;/a&gt; if you’re curious to
learn more.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ndKj77VW2eM?list=PLtLJO5JKE5YDK74RZm67xfwaDgeCj7oq&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Thanks to everyone who worked towards making &lt;a href=&quot;http://fosdem.org&quot;&gt;FOSDEM&lt;/a&gt; and
the &lt;a href=&quot;https://fosdem.org/2015/schedule/track/go/&quot;&gt;Go Devroom&lt;/a&gt; such a pleasant
experience.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Quickly cd'ing to local git repositories</title>
   <link href="http://tbg.github.io//cd-git-repository-helper"/>
   <updated>2014-12-08T00:00:00+00:00</updated>
   <id>http://tbg.github.io//cd-git-repository</id>
   <content type="html">&lt;p&gt;&lt;em&gt;When I work on my laptop, almost exclusively that work happens inside of a &lt;a href=&quot;http://en.wikipedia.org/wiki/Git_%28software%29&quot;&gt;Git repository&lt;/a&gt;. Working with &lt;a href=&quot;http://golang.org&quot;&gt;Go&lt;/a&gt;, that usually means typing something along the lines &lt;code class=&quot;highlighter-rouge&quot;&gt;cd ~/Code/Go/src/github.com/cockroachdb/cockroach&lt;/code&gt;. If you’re changing repos a lot, that can be annoying.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But it’s easy to optimize this a little bit, because &lt;em&gt;usually you only have one copy of the repository on your file system&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;With the help of the script below,&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Code/Go/src/github.com/cockroachdb/cockroach
...
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/dotfiles
...
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Code/tschottdorf.github.io
...
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Code/Go/src/github.com/jpetazzo/docker-busybox
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;turns into&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gitcd cockroach
...
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gitcd dotfiles
...
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gitcd tscho&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
...
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gitcd &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;busybox
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which is as efficient as it gets. I’ve topped this with&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;alias gcd=&quot;gitcd&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;alias ccd=&quot;gitcd cockroachdb/cockroach&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;to optimize even further. Here’s the script:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;gitcd &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    return &lt;/span&gt;1
  &lt;span class=&quot;k&quot;&gt;fi
  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NEWDIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;find ~ &lt;span class=&quot;nt&quot;&gt;-path&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;*/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.git&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; d &lt;span class=&quot;nt&quot;&gt;-exec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;{}/..&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt; | head &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 1&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NEWDIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    return &lt;/span&gt;1
  &lt;span class=&quot;k&quot;&gt;fi
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NEWDIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It doesn’t do much except for invoking &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt;, looking for the first occurance of a folder that matches your input and contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt; subfolder. If there is one, simply &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; there. I’m sure somebody out there is already using something like this - it’s just so trivial but useful.&lt;/p&gt;

&lt;p&gt;The original script (which may see some future tweaks as I find myself wanting them) is in my &lt;a href=&quot;https://github.com/tschottdorf/git-cd&quot;&gt;git-cd repository&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Using CircleCI with Docker</title>
   <link href="http://tbg.github.io//cockroach-docker-circleci-continuous-integration"/>
   <updated>2014-11-16T00:00:00+00:00</updated>
   <id>http://tbg.github.io//circleci-docker-integration</id>
   <content type="html">&lt;p&gt;&lt;em&gt;I recently spent a weekend switching &lt;a href=&quot;https://github.com/cockroachdb/cockroach&quot;&gt;Cockroach&lt;/a&gt; to &lt;a href=&quot;http://circleci.com&quot;&gt;CircleCI&lt;/a&gt; with &lt;a href=&quot;http://docker.io&quot;&gt;Docker&lt;/a&gt; for our continuous integration needs. Previously, we had a standard build script on &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt;, but with a variety of dependencies that needed to be compiled and vendored in, the average build took about ten minutes to get to the unit tests.
Now we clock in at about half that but are able to actually orchestrate a &lt;a href=&quot;https://github.com/cockroachdb/cockroach&quot;&gt;Cockroach&lt;/a&gt; cluster and run acceptance tests. But there are some small kinks that are useful to know about.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Cockroach (at the time of writing) comes with three images:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cockroachdb/cockroach-devbase&lt;/code&gt;: A development base image.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cockroachdb/cockroach-dev&lt;/code&gt;: The development image, based on
 cockroach-devbase.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cockroachdb/cockroach&lt;/code&gt;: A small, statically linked
&lt;a href=&quot;https://github.com/cockroachdb/cockroach&quot;&gt;Cockroach&lt;/a&gt; binary inside
of a &lt;a href=&quot;http://busybox.net&quot;&gt;BusyBox&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We want &lt;a href=&quot;http://circleci.com&quot;&gt;CircleCI&lt;/a&gt; to build those three images and run a bunch of tests.&lt;/p&gt;

&lt;h2 id=&quot;caching-docker-images&quot;&gt;Caching Docker images&lt;/h2&gt;
&lt;p&gt;Unfortunately, while Docker locally caches the result of every build step and will blaze through without doing any actual work until it encounters a step that breaks the cache (for instance because a file from the build context changed), on &lt;a href=&quot;http://circleci.com&quot;&gt;CircleCI&lt;/a&gt; each build runs on a fresh virtual machine somewhere on their cluster.
This means that unless you’re smart about it, Docker will always build everything from the very first step. But the goal was to not have to that - what next?&lt;/p&gt;

&lt;p&gt;Luckily, &lt;a href=&quot;https://circleci.com/docs/docker&quot;&gt;CircleCI answers this&lt;/a&gt; themselves and advises you to use &lt;code class=&quot;highlighter-rouge&quot;&gt;docker save&lt;/code&gt; to export the built image into a tar file, which you can then tell them to cache:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dependencies:
  cache_directories:
    - &quot;~/docker&quot;

  override:
    - if [[ -e ~/docker/image.tar ]]; then \
        docker load -i ~/docker/image.tar; fi
    - ./build/build-docker.sh
    - mkdir -p ~/docker; docker save cockroachdb/cockroach-devbase \
        &amp;gt; ~/docker/image.tar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While this works, &lt;strong&gt;it costs time&lt;/strong&gt;. For our ~1GB &lt;code class=&quot;highlighter-rouge&quot;&gt;cockroachdb/cockroach-devbase&lt;/code&gt; image, about a minute to load and a little less to save. Plus, the data stored on the cache has to be copied over the network to our vm every time a test runs - another noticeable fraction of a minute.&lt;/p&gt;

&lt;p&gt;So we pay a price here to use Docker, but yes - once we have the base image loaded, building the actual &lt;code class=&quot;highlighter-rouge&quot;&gt;cockroachdb/cockroach-dev&lt;/code&gt; image is very fast - way less than a minute.&lt;/p&gt;

&lt;h3 id=&quot;git-kills-the-cache&quot;&gt;Git kills the cache&lt;/h3&gt;
&lt;p&gt;If you’ve made it that far, you’ll be fairly happy, but if you’re building containers that get the &lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt; directory in their build context, you’ll notice that it is &lt;strong&gt;never cached&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;That’s because CircleCI gives you (more or less) a fresh repo every time - each file will be new and Docker will invalidate its cache for them, even if they haven’t changed content-wise.&lt;/p&gt;

&lt;p&gt;This may not be that obvious if you’re only building your image once, but we’re running acceptance tests which create containers repeatedly, and we &lt;em&gt;do notice&lt;/em&gt; if it does unecessary work every time.&lt;/p&gt;

&lt;p&gt;This led me to concoct the following, beautiful hack:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;checkout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;find . -exec touch -t 201401010000 {} \;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;for x in $(git ls-tree --full-tree --name-only -r HEAD);\&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;do touch -t \&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;$(date -d &quot;$(git log -1 --format=%ci &quot;${x}&quot;)&quot; +%y%m%d%H%M.%S) \&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&quot;${x}&quot;; done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This goes through the repo after checkout, first resetting every the timestamp for each item to 2014/01/01. Then, for all files which are tracked by git, we take the timestamp of the last commit that changed this file.
Not beautiful, and there might be a better solution, but CircleCI’s support at the time of writing couldn’t come up with anything better on the spot.&lt;/p&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;The actual tests are easy. We’ve got full-fledged containers disposable, and we add the following sections to &lt;code class=&quot;highlighter-rouge&quot;&gt;circle.yml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;test:
  override:
    - docker run &quot;cockroachdb/cockroach-dev&quot; test
    - make acceptance
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The former runs our unit tests and does race testing, while the latter boots up a cluster of three nodes and verifies that it connects fully. We’ll make sure to add more tests here over time and verify complex behaviour of the cluster as a system.&lt;/p&gt;

&lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;/h2&gt;

&lt;p&gt;Finally, we can automagically deploy the new build in case the tests come up green. &lt;code class=&quot;highlighter-rouge&quot;&gt;./build/build-docker-deploy&lt;/code&gt; builds our deployment container; the rest is straight from CircleCI’s examples.&lt;/p&gt;

&lt;p&gt;With this section, any green build will be build statically, tested again for good measure in the static environment, and finally pushed to the Docker registry for you all to enjoy.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deployment:
  docker:
    branch: master
    commands:
      - ./build/build-docker-deploy.sh:
         timeout: 600
      - sed &quot;s/&amp;lt;EMAIL&amp;gt;/$DOCKER_EMAIL/;s/&amp;lt;AUTH&amp;gt;/$DOCKER_AUTH/&quot; &amp;gt; \
        &quot;resources/deploy_templates/.dockercfg.template&quot; &amp;gt; ~/.dockercfg
      - docker push cockroachdb/cockroach
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;you-cant-delete-images&quot;&gt;You can’t delete images&lt;/h2&gt;
&lt;p&gt;Just something to think about. It’s tempting to create containers that have predefined names, and sometimes you’ll want to delete and recreate them in your tests. Doesn’t work here.
&lt;a href=&quot;http://circleci.com&quot;&gt;CircleCI&lt;/a&gt;’s support told me that&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;deleting btrfs snapshots requires additional capabilities that the
pseudo-root user inside a container doesn’t have. Generally docker rm isn’t
necessary. We completely destroy the entire container and everything associated with it at the end of a build anyway.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can work around this usually, but if you write more complex acceptance tests, just make sure that you never need to remove a container in the process.&lt;/p&gt;

&lt;h2 id=&quot;the-full-circleyml--conclusion&quot;&gt;The full circle.yml &amp;amp; conclusion&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://circleci.com&quot;&gt;CircleCI&lt;/a&gt; is great and the folks over there are
helpful. Also: Free for Open Source projects.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docker.io&quot;&gt;Docker&lt;/a&gt; support works well and opens the door to
testing a lot more than you could before.&lt;/li&gt;
  &lt;li&gt;Caching is a bit tricky: Large images cost time to move around the network,
and they need to be fed in and out of Docker manually - also cost-intensive.
Apparently, solutions for this are being investigated.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All in all: It’s already good, and it will be much better soon. There’s really no reason to go without Docker if you already have a Dockerfile for your project.&lt;/p&gt;

&lt;p&gt;Here’s our full Dockerfile at the time of writing (slightly edited):&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;checkout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;find . -exec touch -t 201401010000 {} \;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;for x in $(git ls-tree --full-tree --name-only -r HEAD); do \&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;touch -t $(date -d &quot;$(git log -1 --format=%ci &quot;${x}&quot;)&quot; \&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;+%y%m%d%H%M.%S) &quot;${x}&quot;; done&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;cache_directories&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;~/docker&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mkdir -p ~/docker&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;if [[ -e ~/docker/base.tar ]]; then \&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;docker load -i ~/docker/base.tar; fi&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./build/build-docker-dev.sh&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker save &quot;cockroachdb/cockroach-devbase&quot; &amp;gt; ~/docker/base.tar&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;if [[ ! -e ~/docker/dnsmasq.tar ]]; then \&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;docker pull &quot;cockroachdb/dnsmasq&quot; &amp;amp;&amp;amp; \&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;docker save &quot;cockroachdb/dnsmasq&quot; &amp;gt; ~/docker/dnsmasq.tar; \&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;else docker load -i ~/docker/dnsmasq.tar; fi&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker history &quot;cockroachdb/cockroach-dev&quot;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker run &quot;cockroachdb/cockroach-dev&quot; test&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;make acceptance&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;deployment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./build/build-docker-deploy.sh&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;600&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sed &quot;s/&amp;lt;EMAIL&amp;gt;/$DOCKER_EMAIL/;s/&amp;lt;AUTH&amp;gt;/$DOCKER_AUTH/&quot; &amp;lt; \&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;resources/deploy_templates/.dockercfg.template&quot; &amp;gt; ~/.dockercfg&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker push cockroachdb/cockroach&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can find the setup as described above in &lt;a href=&quot;https://github.com/cockroachdb/cockroach/tree/7e452c2a8a9537e4ba5906ccc8a54c50b06885fb&quot;&gt;Cockroach@7e452&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Docker at Cockroach: the power of development and deployment containers</title>
   <link href="http://tbg.github.io//docker-cockroach-development-deployment-containers"/>
   <updated>2014-11-15T00:00:00+00:00</updated>
   <id>http://tbg.github.io//docker-build-deploy</id>
   <content type="html">&lt;p&gt;&lt;em&gt;At &lt;a href=&quot;https://github.com/cockroachdb/cockroach&quot;&gt;Cockroach&lt;/a&gt;, we are building a scalable, distributed database and use &lt;a href=&quot;http://docker.io&quot;&gt;Docker&lt;/a&gt; to automate and streamline our builds, tests and deploy processes.
When you read about Docker, you normally run across simple Dockerfiles. In this post, I’ll introduce some of the more advanced constructs we are using (nothing fancy - but useful), and how powerful they are in making our lives easier. In particular, you’ll learn how developers can work on &lt;a href=&quot;https://github.com/cockroachdb/cockroach&quot;&gt;Cockroach&lt;/a&gt; without installing anything, and how we reliably build the same deployment-ready minimal containers on any system.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Concisely put, Cockroach (at the time of writing) comes with three images:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cockroachdb/cockroach-devbase&lt;/code&gt;: A development base image.
It does not contain any of the actual Cockroach code, but the build toolchain and vendored-in versions of all the dependencies. Normally, if you work on the code, you don’t need to change this image. We factored it out because this image is a good point to base your build on and can be cached nicely in continuous integration (we use the awesome &lt;a href=&quot;http://circleci.com&quot;&gt;CircleCI&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cockroachdb/cockroach-dev&lt;/code&gt;: The development image.
This is a simple image based on the cockroach-devbase, with only a few lines of Dockerfile.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cockroachdb/cockroach&lt;/code&gt;: The deployment image, i.e. the one you use if you’re
not actually developing, but rather running a Cockroach cluster.
This one is based on &lt;a href=&quot;http://www.busybox.net/&quot;&gt;BusyBox&lt;/a&gt; and comes with a more complicated build process:
A development container builds statically linked binaries and tests. The main binary is put into a minimal container, and the tests can be mounted into that container to check the functionality.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-development-image-cockroachdb-dev&quot;&gt;The Development Image &lt;code class=&quot;highlighter-rouge&quot;&gt;cockroachdb-dev&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;In short, the &lt;a href=&quot;https://github.com/cockroachdb/cockroach&quot;&gt;Cockroach code base&lt;/a&gt; is &lt;a href=&quot;http://golang.org/&quot;&gt;Go&lt;/a&gt; plus some C++. Without Docker, if you were to clone our repo and tried to hack on it, you’d have to do the following:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git@github.com:/cockroachdb/cockroach
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;cockroach&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; ./bootstrap.sh
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# pages and pages of libraries being built&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 10 minutes later:&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make build
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./cockroach
Usage:

        cockroach &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;arguments]
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and that is the best-case scenario in which you have the appropriate new version of C++ installed to build &lt;a href=&quot;http://rocksdb.org&quot;&gt;RocksDB&lt;/a&gt; and the various other dependencies, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;snappy&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;protobuf&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bz2&lt;/code&gt;, … didn’t end up having any build hiccups.&lt;/p&gt;

&lt;p&gt;Also, we would have to script variants of these processes for our continuous integration based on the test environment that they provide.&lt;/p&gt;

&lt;p&gt;That can all be done and in fact I personally hack on Cockroach outside of Docker, but as an outsider wanting to contribute, I don’t want them to deal with all of that.&lt;/p&gt;

&lt;p&gt;Instead, they could simply do a quick &lt;code class=&quot;highlighter-rouge&quot;&gt;docker build -t &quot;cockroachdb/cockroach-dev&quot; .&lt;/code&gt; from our main repo. Let’s try this with a fresh clone:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cockroachdb/cockroach-dev&quot;&lt;/span&gt;
Sending build context to Docker daemon  58.1 MB
Sending build context to Docker daemon
Step 0 : FROM cockroachdb/cockroach-devbase:latest
Pulling repository cockroachdb/cockroach-devbase
0407ad0fa9fd: Pulling image &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;latest&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; from cockroachdb/cockroach-devbase, endpoint: https://registry-1.d0407ad0fa9fd: Download &lt;span class=&quot;nb&quot;&gt;complete
&lt;/span&gt;511136ea3c5a: Download &lt;span class=&quot;nb&quot;&gt;complete&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [...]&lt;/span&gt;
8d37c4dafcdf: Download &lt;span class=&quot;nb&quot;&gt;complete
&lt;/span&gt;Status: Downloaded newer image &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;cockroachdb/cockroach-devbase:latest
 &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 0407ad0fa9fd
Step 1 : MAINTAINER Tobias Schottdorf &amp;lt;tobias.schottdorf@gmail.com&amp;gt;
 &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Running &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;e6528c82806a
 &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 768b9e8f0212
Removing intermediate container e6528c82806a
Step 2 : ADD &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; /cockroach/
 &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; d94b378cfa97
Removing intermediate container 2a3b51d06418
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
go build  &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; cockroach
 &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 2fd9e266b824
Removing intermediate container 0b156cca7c81
Step 6 : EXPOSE 8080
 &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Running &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;4c99f7e9fa84
 &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 85d3a50c9f07
Removing intermediate container 4c99f7e9fa84
Step 7 : ENTRYPOINT /cockroach/cockroach.sh
 &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Running &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;6ccf7d7498df
 &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 7f811d0fac6f
Removing intermediate container 6ccf7d7498df
Step 8 : CMD &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Running &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;24de6f231385
 &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 0065234019a6
Removing intermediate container 24de6f231385
Successfully built 0065234019a6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After the download of the &lt;code class=&quot;highlighter-rouge&quot;&gt;cockroachdb/cockroach-devbase&lt;/code&gt; image, it took about 20 seconds to build the &lt;code class=&quot;highlighter-rouge&quot;&gt;cockroachdb/cockroach-dev&lt;/code&gt; image. Now, right away, we can run cockroach:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;s2&quot;&gt;&quot;cockroachdb/cockroach-dev&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;
Usage:

        cockroach &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;arguments]
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After perhaps making some local changes to the git repo, another &lt;code class=&quot;highlighter-rouge&quot;&gt;docker build -t &quot;cockroachdb/cockroach-dev&quot;&lt;/code&gt; will update the image, taking virtually as long as it would outside of the virtual environment, and running the tests is as easy as&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;s2&quot;&gt;&quot;cockroachdb/cockroach-dev&quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
go &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;-run&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.*&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./...&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-logtostderr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-timeout&lt;/span&gt; 10s
ok      github.com/cockroachdb/cockroach/client 0.216s
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
go &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;-race&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-run&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.*&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./...&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-logtostderr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-timeout&lt;/span&gt; 1m
ok      github.com/cockroachdb/cockroach/client 1.811s
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can also run &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run -t -i &quot;cockroachdb/cockroach-dev&quot; shell&lt;/code&gt;, which is a special parameter that drops us into a shell. Since the environment variables have all been changed to point to the vendored libraries, this is a good setting to invoke &lt;code class=&quot;highlighter-rouge&quot;&gt;go&lt;/code&gt; directly without going through &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; - something that may be useful to do for different reasons.&lt;/p&gt;

&lt;p&gt;That’s good stuff, and a fairly standard use of Docker at this point.&lt;/p&gt;

&lt;h2 id=&quot;the-base-image-cockroach-devbase&quot;&gt;The Base Image &lt;code class=&quot;highlighter-rouge&quot;&gt;cockroach-devbase&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The base image is what the previous image was based on - it’s fairly simple in itself, too. Omitting some less interesting bits, it boils down to the following Dockerfile:&lt;/p&gt;

&lt;div class=&quot;language-docker highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; golang:latest&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;MAINTAINER&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; Tobias Schottdorf &amp;lt;tobias.schottdorf@gmail.com&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Setup the toolchain.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get update &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get dist-upgrade &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt; apt-get install &lt;span class=&quot;nt&quot;&gt;--no-install-recommends&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--auto-remove&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; git build-essential pkg-config file &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt; apt-get clean autoclean &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get autoremove &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /tmp/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /var/lib/&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;apt,dpkg,cache,log&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; GOPATH /go&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . /cockroach/build/devbase/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./build/devbase/godeps.sh&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./build/devbase/vendor.sh&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;/bin/bash&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Basing itself of &lt;code class=&quot;highlighter-rouge&quot;&gt;golang:latest&lt;/code&gt;, we end up not having to worry about Go, and then it’s a simple matter of having a working compiler environment (golang:stable is Jessie, so it ships with a recent GCC), pulling the go dependencies and vendoring the required libraries into the tree.&lt;/p&gt;

&lt;h2 id=&quot;the-deployment-image-cockroach&quot;&gt;The Deployment Image &lt;code class=&quot;highlighter-rouge&quot;&gt;cockroach&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This is where things get fun. If you want to build a deploy image, you need a little shell scripting on top of calling Docker.&lt;/p&gt;

&lt;p&gt;The deploy image creation script requires a working cockroach/cockroach-dev image, in which a statically linked (linux64) binary is built. Using this binary, a deploy image based on BusyBox is created.&lt;/p&gt;

&lt;p&gt;Additionally, we built statically linked tests which are mounted into the appropriate location on the deploy image, running them once. These are not a part of the resulting image but make sure that at least on the machine that creates the deploy image, the tests all pass.&lt;/p&gt;

&lt;p&gt;So you get both upsides: A small image, containing only BusyBox and Cockroach’s main binary - but you can run all the tests as well if you supply them to the container from the outside file system. The resulting script looks something like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Build a statically linked Cockroach binary&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Author: Tobias Schottdorf (tobias.schottdorf@gmail.com)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ex&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;dirname &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; resources cockroach .out &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; .out
docker run &lt;span class=&quot;s2&quot;&gt;&quot;cockroachdb/cockroach-dev&quot;&lt;/span&gt; shell &lt;span class=&quot;s2&quot;&gt;&quot;export STATIC=1 &amp;amp;&amp;amp; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
  cd /cockroach &amp;amp;&amp;amp; (rm -f cockroach &amp;amp;&amp;amp; make clean build testbuild) &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
  tar -cf - cockroach &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\$&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;(find . -name '*.test' -type f -printf '&quot;&lt;/span&gt;%p&lt;span class=&quot;s2&quot;&gt;&quot; ') resources&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; .out/files.tar&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above builds the static binary and tests inside of the container, collects them
from the file system, tars them and sends them out to stdout.&lt;/p&gt;

&lt;p&gt;Next the script extracts everything, puts the `cockroach’ binary in the right spot and builds the BusyBox container:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xvC&lt;/span&gt; .out/ &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; .out/files.tar &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; .out/files.tar
mv .out/cockroach &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
cp &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; .out/resources ./resources
docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; cockroachdb/cockroach &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Test run: Mounting the .out directory into the container’s /test/, the
container will run all the tests, making sure that everything looks good.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.out&quot;&lt;/span&gt;:/test/.out cockroachdb/cockroach
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The actual Dockerfile that is being built is trivial:&lt;/p&gt;

&lt;div class=&quot;language-docker highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; busybox:buildroot-2014.02&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;MAINTAINER&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; Tobias Schottdorf &amp;lt;tobias.schottdorf@gmail.com&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /test /cockroach
&lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; cockroach /cockroach/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; cockroach.sh /cockroach/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; test.sh /test/&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;EXPOSE&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; 8080&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;/cockroach/cockroach.sh&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this build process, the actual deployment container is relatively small. The &lt;code class=&quot;highlighter-rouge&quot;&gt;cockroach&lt;/code&gt; binary weighs in at about 44mb at the time of writing; BusyBox adds another meager 5mb.&lt;/p&gt;

&lt;p&gt;Compared to the &amp;gt;1GB &lt;code class=&quot;highlighter-rouge&quot;&gt;cockroachdb/cockroach-dev&lt;/code&gt; image, this is very convenient.&lt;/p&gt;

&lt;p&gt;You can find the whole shebang in &lt;a href=&quot;https://github.com/cockroachdb/cockroach/tree/7e452c2a8a9537e4ba5906ccc8a54c50b06885fb&quot;&gt;Cockroach@7e452&lt;/a&gt; - it’s quite likely that over time, things will change quite a bit still.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Golang: Statically linked binary and tests for Cockroach</title>
   <link href="http://tbg.github.io//linking-golang-go-statically-cgo-testing"/>
   <updated>2014-11-10T00:00:00+00:00</updated>
   <id>http://tbg.github.io//golang-static-linking</id>
   <content type="html">&lt;p&gt;&lt;em&gt;At &lt;a href=&quot;https://github.com/cockroachdb/cockroach&quot;&gt;Cockroach&lt;/a&gt;, we write a lot of tests, which is great and absolutely necessary: Building a CP (&lt;a href=&quot;http://en.wikipedia.org/wiki/CAP_theorem&quot;&gt;consistent and partition-tolerant&lt;/a&gt;) distributed system (like &lt;a href=&quot;https://github.com/cockroachdb/cockroach&quot;&gt;Cockroach&lt;/a&gt;) without getting everything exactly right just gives you another system without any guarantees. Below I’ll describe what I did to build both our main binary and our tests (!) statically, and how far I got.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit (04/11/2015)&lt;/strong&gt;: Ever since Go 1.4 came around, this article has been slightly outdated. A change in 1.4 altered the behaviour of the &lt;code class=&quot;highlighter-rouge&quot;&gt;-a&lt;/code&gt; flag such that it would not rebuild the standard library. Consequently, the &lt;code class=&quot;highlighter-rouge&quot;&gt;netgo&lt;/code&gt; tag did not have the desired effect any more. There are various discussions about this to be found online, and luckily there’s an easy fix: just add the &lt;code class=&quot;highlighter-rouge&quot;&gt;-installsuffix netgo&lt;/code&gt; parameter to your go build flags. That causes the packages to be built in &lt;code class=&quot;highlighter-rouge&quot;&gt;${GOROOT}/pkg/&amp;lt;arch&amp;gt;_netgo&lt;/code&gt; instead, causing the &lt;code class=&quot;highlighter-rouge&quot;&gt;-a&lt;/code&gt; flag to behave as it should.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR: &lt;code class=&quot;highlighter-rouge&quot;&gt;-a&lt;/code&gt; is surprisingly useful.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Our codebase is mostly &lt;a href=&quot;http://golang.org/&quot;&gt;Go&lt;/a&gt;, but with a number of references to C++. The result of a successful build is a single binary, and we want users to be able to deploy this binary right away without having to setup a build toolchain or making sure that they have the right libs we link against.&lt;/p&gt;

&lt;p&gt;In a nutshell, we want a statically linked binary. And &lt;strong&gt;even more&lt;/strong&gt;, we want to compile the &lt;strong&gt;tests&lt;/strong&gt; as statically linked binaries so that they can be run in their final deploy environment. It is this last part that makes things a bit more complex.&lt;/p&gt;

&lt;h2 id=&quot;a-lot-of-go-links-dynamically&quot;&gt;A lot of Go links dynamically&lt;/h2&gt;
&lt;p&gt;Often, you hear complaints about Go binary sizes along with the explanation that &lt;em&gt;it’s statically linked, always&lt;/em&gt;. We’d be happy to have it that way, but usually only &lt;em&gt;simple&lt;/em&gt; Go programs are statically linked - they can use the gc tool chain (5l, 6l, 8l), and even just using the &lt;code class=&quot;highlighter-rouge&quot;&gt;net&lt;/code&gt; package requires a special build tag (-tags netgo), or you end up with a dynamically linked binary.&lt;/p&gt;

&lt;p&gt;And once you’re reaching out to the C/C++ world via CGO, &lt;code class=&quot;highlighter-rouge&quot;&gt;go build&lt;/code&gt; will definitely use the external linker, and you’re very likely ending up with a &lt;strong&gt;dynamically linked&lt;/strong&gt; binary.&lt;/p&gt;

&lt;p&gt;At &lt;a href=&quot;https://github.com/cockroachdb/cockroach&quot;&gt;Cockroach&lt;/a&gt;, we certainly have such dependencies: Our own C++ libs used for low-level stuff, protocol buffers and &lt;a href=&quot;http://rocksdb.org/&quot;&gt;RocksDB&lt;/a&gt;, a more performant fork of &lt;a href=&quot;http://en.wikipedia.org/wiki/LevelDB&quot;&gt;Google’s LevelDB&lt;/a&gt;. Those dependencies offer static libraries, of course, so when I started this I was reasonably optimistic.&lt;/p&gt;

&lt;h3 id=&quot;whats-being-linked&quot;&gt;What’s being linked?&lt;/h3&gt;
&lt;p&gt;Let’s start with the build process that we use when developing - we don’t care about the way it’s linked, and consequently we (more or less) run&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ go build -i -o cockroach
$ ldd cockroach
linux-vdso.so.1 =&amp;gt;  (0x00007fffd6ffe000)
libstdc++.so.6 =&amp;gt; /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00002ab74bab6000)
libm.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00002ab74bdba000)
librt.so.1 =&amp;gt; /lib/x86_64-linux-gnu/librt.so.1 (0x00002ab74c0c0000)
libpthread.so.0 =&amp;gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00002ab74c2c8000)
libgcc_s.so.1 =&amp;gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00002ab74c4e6000)
libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00002ab74c6fc000)
/lib64/ld-linux-x86-64.so.2 (0x00002ab74b891000)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Yep, as expected, a lot of external libraries are being referenced.&lt;/p&gt;

&lt;h3 id=&quot;statically-first-try&quot;&gt;Statically, first try&lt;/h3&gt;
&lt;p&gt;Some light googling brings up &lt;a href=&quot;http://blog.hashbangbash.com/2014/04/linking-golang-statically/&quot;&gt;this article&lt;/a&gt;, so we try this next:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ go build --ldflags '-extldflags &quot;-static&quot;'
...
In function `std::tr1::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const':
/usr/include/c++/4.8/tr1/hashtable_policy.h:469: undefined reference to `ceilf'
/usr/include/c++/4.8/tr1/hashtable_policy.h:475: undefined reference to `ceilf'
/home/tobias/Code/Go/src/github.com/cockroachdb/cockroach/_vendor/usr/lib/libprotobuf.a(descriptor.o):
In function `lower_bound&amp;lt;long unsigned int const*, float&amp;gt;':
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Ouch&lt;/em&gt;. Well, thinking about it, we probably have to tell the linker some of the libs it should link against.&lt;/p&gt;

&lt;h3 id=&quot;adding-libraries&quot;&gt;Adding libraries&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ceilf&lt;/code&gt; sounds mathy, so let’s add the &lt;code class=&quot;highlighter-rouge&quot;&gt;math&lt;/code&gt; library (&lt;code class=&quot;highlighter-rouge&quot;&gt;-lm&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ go build --ldflags '-extldflags &quot;-lm -static&quot;'
...
/usr/include/c++/4.8/tr1/hashtable_policy.h:384: undefined reference to `std::tr1::__detail::__prime_list'
/home/tobias/Code/Go/src/github.com/cockroachdb/cockroach/_vendor/usr/lib/libprotobuf.a(dynamic_message.o): In function `lower_bound&amp;lt;long unsigned int const*, float&amp;gt;':
/usr/include/c++/4.8/bits/stl_algobase.h:965: undefined reference to `std::tr1::__detail::__prime_list'collect2: error: ld returned 1 exit status
/usr/local/go/pkg/tool/linux_amd64/6l: running gcc failed: unsuccessful exit status 0x100
make: *** [build] Error 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Well. The math errors are gone, but there’s still some other stuff. Looks like it wants to be linked against stdlib? We can add that statically via &lt;code class=&quot;highlighter-rouge&quot;&gt;-lstdc++&lt;/code&gt;. Another try:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ go build --ldflags '-extldflags &quot;-lm -lstdc++ -static&quot;
# github.com/cockroachdb/cockroach
...00003.o: In function `_cgo_0db69e1b5445_Cfunc_getpwnam_r':
(.text+0x58): warning: Using 'getpwnam_r' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking
...00003.o: In function `_cgo_0db69e1b5445_Cfunc_mygetpwuid_r':
.../go/src/pkg/os/user/lookup_unix.go:27: warning: Using 'getpwuid_r' in statically
linked applications requires at runtime the shared libraries from the glibc version used for linking
...000001.o: In function `_cgo_14616c423265_Cfunc_freeaddrinfo':
.../go/src/pkg/net/cgo_unix.go:97: warning: Using 'getaddrinfo' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking
$ echo $?
0
ldd cockroach
     not a dynamic executable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;success-oh-wait&quot;&gt;Success! …oh wait.&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;That wasn’t so hard. Some warnings remain, but we have an executable.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Fast forward a little: It turns out that the binary created in this way has no functional networking capabilities. Looking at the last warning about &lt;code class=&quot;highlighter-rouge&quot;&gt;getaddrinfo&lt;/code&gt;, this seems to make sense - &lt;code class=&quot;highlighter-rouge&quot;&gt;getaddrinfo&lt;/code&gt; supposedly tries to get to glibc at runtime, which isn’t available and will hence return an error. If it can’t connect anywhere, it’s probably not such a great fit for a &lt;strong&gt;distributed&lt;/strong&gt; database.&lt;/p&gt;

&lt;p&gt;Luckily, Go has recently (in 1.2) acquired a new build tag &lt;code class=&quot;highlighter-rouge&quot;&gt;netgo&lt;/code&gt; which addresses precisely this issue:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The net package requires cgo by default because the host operating system must in general mediate network call setup. On some systems, though, it is possible to use the network without cgo, and useful to do so, for instance to avoid dynamic linking. The new build tag netgo (off by default) allows the construction of a net package in pure Go on those systems where it is possible.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So this is exactly up our alley, and since we’re just fooling around at this point, let’s not think about whether going down this road will impact networking performance negatively. We’ve come too far to stop.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ go build -tags netgo --ldflags '-extldflags &quot;-lm -lstdc++ -static&quot;' -i -o cockroach
...
exact same stuff as before
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yep, exact same stuff. And exact same problems. In particular, the warning about &lt;code class=&quot;highlighter-rouge&quot;&gt;getaddrinfo&lt;/code&gt; is still there, and that’s an indicator that networking still leaves Go and will fail for us.&lt;/p&gt;

&lt;h3 id=&quot;the-magic-flag&quot;&gt;The magic flag&lt;/h3&gt;
&lt;p&gt;The next step I found out about the hard way: By trying out a lot of random things.
My solution: add the &lt;code class=&quot;highlighter-rouge&quot;&gt;-a&lt;/code&gt; flag to &lt;code class=&quot;highlighter-rouge&quot;&gt;go build&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-a  force rebuilding of packages that are already up-to-date.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Yes. Adding this tag suddenly causes the &lt;code class=&quot;highlighter-rouge&quot;&gt;-tags netgo&lt;/code&gt; parameters to do their job.&lt;/strong&gt; That’s all I can tell you.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;go build -a -tags netgo --ldflags '-extldflags &quot;-lm -lstdc++ -static&quot;' -i -o cockroach
# github.com/cockroachdb/cockroach
/var/tmp/go-link-8PWBSa/000002.o: In function `mygetpwuid_r':
/usr/local/go/src/pkg/os/user/lookup_unix.go:72: warning: Using 'getpwnam_r' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking
/var/tmp/go-link-8PWBSa/000002.o: In function `_cgo_0db69e1b5445_Cfunc_mygetpwuid_r':
/usr/local/go/src/pkg/os/user/lookup_unix.go:27: warning: Using 'getpwuid_r' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The warnings left above tell us that we won’t be able to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;os/user&lt;/code&gt; package to look up system user accounts. I’ve checked manually that those calls simply &lt;em&gt;fail&lt;/em&gt; and don’t &lt;em&gt;segfault&lt;/em&gt;, so &lt;em&gt;whatever&lt;/em&gt;. Of course they pop up with every build, so ideally we want to get rid of this eventually, but right now let’s continue down the road.&lt;/p&gt;

&lt;h3 id=&quot;intermediate-result&quot;&gt;Intermediate result&lt;/h3&gt;
&lt;p&gt;Ok, we’ve got a binary that seems to be working. I can put it into a &lt;a href=&quot;http://docker.io/&quot;&gt;Docker container&lt;/a&gt; based on &lt;a href=&quot;http://www.busybox.net/&quot;&gt;BusyBox&lt;/a&gt;, start a couple of nodes and they can connect to each other - proving that networking is &lt;em&gt;at least kind of&lt;/em&gt; working.&lt;/p&gt;

&lt;p&gt;But, we’ve seen above that getting a binary doesn’t mean that binary is worth anything - so let’s get to doing the same for tests!&lt;/p&gt;

&lt;h3 id=&quot;statically-linked-tests---surprise&quot;&gt;Statically linked tests - surprise!&lt;/h3&gt;
&lt;p&gt;Let’s use what we’ve learnt about the build process and hope for the best. We are building the tests for Cockroach’s &lt;code class=&quot;highlighter-rouge&quot;&gt;gossip&lt;/code&gt; package, and run&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ go test -a -tags netgo -ldflags '-extldflags &quot;-lm -lstdc++ -static&quot;' -c &quot;./gossip&quot; -logtostderr -timeout 10s
$ ldd gossip.test
linux-vdso.so.1 =&amp;gt;  (0x00007fff4d5fe000)
libpthread.so.0 =&amp;gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00002aca89834000)
libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00002aca89a52000)
/lib64/ld-linux-x86-64.so.2 (0x00002aca8960f000)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Oh, come on&lt;/strong&gt;. So apparently you can tell the linker what you want, you might still end up with a &lt;em&gt;dynamically linked binary&lt;/em&gt;, at least when compiling tests. Presumably, Go internally enriches your stuff with its test runner, and something you don’t want happens.&lt;/p&gt;

&lt;p&gt;You &lt;em&gt;could&lt;/em&gt; add the &lt;code class=&quot;highlighter-rouge&quot;&gt;-x&lt;/code&gt; flag to see exactly what the Go toolchain does, but, well, I’ve tried that and I couldn’t whole-heartedly tell you that it has improved my understanding of things.&lt;/p&gt;

&lt;p&gt;The second instinct: Slap some libs on top of it - adding a &lt;code class=&quot;highlighter-rouge&quot;&gt;-lpthread&lt;/code&gt; to get &lt;code class=&quot;highlighter-rouge&quot;&gt;libpthread&lt;/code&gt; could be fun. But, libpthread is part of GLIBC, so apparently that’s something you oughtn’t be doing anyways. Luckily, you don’t have to, it won’t change a single thing. There’s one thing that does, however:&lt;/p&gt;

&lt;h2 id=&quot;disabling-cgo-where-not-required&quot;&gt;Disabling CGO where not required&lt;/h2&gt;
&lt;p&gt;I’ve mentioned previously that in this project, we’re using CGO to reach out to C++-Land. Interestingly, there’s something there that saves the day for us: A couple of packages end up compiling their tests statically if we do it as above, and a couple won’t.&lt;/p&gt;

&lt;p&gt;Fortunately, those packages that actually &lt;strong&gt;need&lt;/strong&gt; CGO end up statically linked, and only packages that &lt;strong&gt;don’t require it&lt;/strong&gt; have the issue above. So, time for a hack, straight from our &lt;a href=&quot;https://github.com/cockroachdb/cockroach/blob/7e452c2a8a9537e4ba5906ccc8a54c50b06885fb/Makefile&quot;&gt;Makefile&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;p &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;github.com/cockroachdb/cockroach/gossip&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;basename &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;go list &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\{\{&lt;/span&gt;.Dir&lt;span class=&quot;se&quot;&gt;\}\}&lt;/span&gt; ./...&lt;span class=&quot;nv&quot;&gt;$NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  go &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-tags&lt;/span&gt; netgo &lt;span class=&quot;nt&quot;&gt;-ldflags&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-extldflags &quot;-lm -lstdc++ -static&quot;'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-logtostderr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-timeout&lt;/span&gt; 10s &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$OUT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ldd &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$OUT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    2&amp;gt;&amp;amp;1 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: rebuilding with CGO_ENABLED=0 to get static binary...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;CGO_ENABLED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 go &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-tags&lt;/span&gt; netgo &lt;span class=&quot;nt&quot;&gt;-ldflags&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-extldflags &quot;-lm -lstdc++ -static&quot;'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-logtostderr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-timeout&lt;/span&gt; 10s &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    mv &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$OUT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DIR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this point, I couldn’t say I’m exactly happy with it, but &lt;strong&gt;at least I got what I wanted&lt;/strong&gt;. Statically linked test binaries that I can slap anywhere the cockroach binary would run.&lt;/p&gt;

&lt;h2 id=&quot;race-tests&quot;&gt;Race tests?&lt;/h2&gt;

&lt;p&gt;Nope. &lt;code class=&quot;highlighter-rouge&quot;&gt;runtime/race&lt;/code&gt; won’t build for those tests that require &lt;code class=&quot;highlighter-rouge&quot;&gt;CGO_ENABLED=0&lt;/code&gt; above, such as our &lt;code class=&quot;highlighter-rouge&quot;&gt;gossip&lt;/code&gt; package. You end up with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gossip: rebuilding with CGO_ENABLED=0 to get static binary...
# testmain
runtime/race(.text): undefined: __libc_malloc
runtime/race(.text): undefined: getuid
runtime/race(.text): undefined: pthread_self
runtime/race(.text): undefined: madvise
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;so I think this is where we can’t go further at this point.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;p&gt;I basically got what I wanted but at the expense of a few hacks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;use &lt;code class=&quot;highlighter-rouge&quot;&gt;-a&lt;/code&gt; flag for its desired (but mystery) side-effect&lt;/li&gt;
  &lt;li&gt;ignore warnings from package &lt;code class=&quot;highlighter-rouge&quot;&gt;os/user&lt;/code&gt; - user lookups will always fail&lt;/li&gt;
  &lt;li&gt;have to use &lt;code class=&quot;highlighter-rouge&quot;&gt;-tags netgo&lt;/code&gt; - performance?&lt;/li&gt;
  &lt;li&gt;get lucky with CGO_ENABLED=0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It seems to me that building static tests isn’t something that was given a lot of thought; especially for race tests this seems fairly hard to get.&lt;/p&gt;

&lt;p&gt;And that concludes this survey of building things statically for a non-trival Go project.
The state of things described in this post is contained in &lt;a href=&quot;https://github.com/cockroachdb/cockroach/blob/7e452c2a8a9537e4ba5906ccc8a54c50b06885fb/Makefile&quot;&gt;Makefile@7e452&lt;/a&gt; and will likely see a lot of changes over time.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Cockroach at the NoSQL User Group Cologne</title>
   <link href="http://tbg.github.io//cockroachdb-talk-nosql-user-group-cologne"/>
   <updated>2014-11-05T00:00:00+00:00</updated>
   <id>http://tbg.github.io//cockroachdb-talk</id>
   <content type="html">&lt;p&gt;I’ve spent quite some time this year working on
&lt;a href=&quot;https://github.com/cockroachdb/cockroach&quot;&gt;Cockroach&lt;/a&gt;,
a &lt;a href=&quot;http://en.wikipedia.org/wiki/NewSQL&quot;&gt;NewSQL&lt;/a&gt; database similar in spirit to
&lt;a href=&quot;http://en.wikipedia.org/wiki/Spanner_%28database%29&quot;&gt;Google’s Spanner&lt;/a&gt;. It is
a distributed, replicated and available database that comes with transactions
as one of its key features. The project is extremely ambitious but the basic
design is sleek and beautiful.&lt;/p&gt;

&lt;p&gt;Recently, I talked about Cockroach in the &lt;a href=&quot;http://www.meetup.com/NoSQL-Usergroup-Cologne/&quot;&gt;NoSQL User Group
Cologne&lt;/a&gt; and explained, among
other things, that you actually want and are able to have transactions in your
distributed database in many situations, and that you can have something like
&lt;a href=&quot;http://en.wikipedia.org/wiki/Spanner_%28database%29&quot;&gt;Spanner&lt;/a&gt; without the infrastructure and hardware zoo.&lt;/p&gt;

&lt;p&gt;If you’re curious, check out
&lt;a href=&quot;https://github.com/cockroachdb/cockroach&quot;&gt;Cockroach&lt;/a&gt; and watch the talk
below (starts at about 1m15s in):&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/jI3LiKhqN0E?t=1m20s&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;
</content>
 </entry>
 

</feed>
